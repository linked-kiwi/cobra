#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.2 on Tue Sep 26 23:41:30 2023
#

import wx, sqlite3

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

factor1=[0,1,15,25,50,85]       # Risk % thresholds
factor2=[0,1,15,25,50,85]       # Operational effectiveness thresholds
factor3=[200,200,150,100,75,50] # Process maturity Risk Factor
factor4=[0,0,0,50,100,150]      # Capability effectiveness thresholds
matdef=("Non-existant","Initial","Informal","Defined","Managed and Measurable","Optimized")
riskdef=("Negligible","Very low","Low","Moderate","High","Extreme")
capdef=("Not on roadmap","On roadmap","Deployment scoped","Basic deployment","Standard deployment","Advanced deployment")
effdef=("Ineffective","Partly Effective","Mostly Effective","Effective","Highly Effective","Extremely Effective")
weighty=["Low","Medium","High"]
d_strategic="Strategic processes deal with broad security program goals, coordination, and provision of resources, including direction and executive reporting. "
d_tactical="Tactical processes focus on the management of activities required to deliver the security outcomes as defined in the security plan."
d_operational="Operational processes involve administration and delivery of the security outcomes as directed by management."

class csFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: csFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((1100, 640))
        self.SetTitle("Cyber Oriented Business Risk Architecture (COBRA) v1.0")

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        self.notebook_1 = wx.Notebook(self.panel_1, wx.ID_ANY)
        sizer_1.Add(self.notebook_1, 0, wx.EXPAND, 0)

        self.nb_tab0 = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.notebook_1.AddPage(self.nb_tab0, "Business")

        sizer_3 = wx.BoxSizer(wx.VERTICAL)

        sizer_31 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3.Add(sizer_31, 0, wx.EXPAND, 0)

        sizer_32 = wx.BoxSizer(wx.VERTICAL)
        sizer_31.Add(sizer_32, 0, wx.EXPAND, 0)

        label_24 = wx.StaticText(self.nb_tab0, wx.ID_ANY, "Business Aspects")
        label_24.SetMinSize((180, 20))
        label_24.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_32.Add(label_24, 0, 0, 0)

        self.btree = wx.TreeCtrl(self.nb_tab0, wx.ID_ANY)
        self.btree.SetMinSize((400, 400))
        self.root=self.btree.AddRoot("CSMP")
        sizer_32.Add(self.btree, 0, wx.ALL, 4)

        self.panel_3 = wx.Panel(self.nb_tab0, wx.ID_ANY, style=wx.BORDER_SIMPLE)
        self.panel_3.SetMinSize((400, 94))
        sizer_32.Add(self.panel_3, 0, wx.ALL, 4)

        sizer_33 = wx.BoxSizer(wx.VERTICAL)

        sizer_34 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_33.Add(sizer_34, 1, wx.EXPAND, 0)

        label_25 = wx.StaticText(self.panel_3, wx.ID_ANY, "MAINTENANCE")
        label_25.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_34.Add(label_25, 0, wx.ALL, 4)

        sizer_34.Add((200, 20), 0, 0, 0)

        self.b_save2a = wx.Button(self.panel_3, wx.ID_ANY, "Save")
        self.b_save2a.SetBackgroundColour(wx.Colour(227, 254, 233))
        sizer_34.Add(self.b_save2a, 0, wx.ALL, 4)

        sizer_35 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_33.Add(sizer_35, 0, wx.EXPAND, 0)

        label_26 = wx.StaticText(self.panel_3, wx.ID_ANY, "Name:")
        label_26.SetMinSize((40, 20))
        sizer_35.Add(label_26, 0, wx.ALL, 4)

        sizer_35.Add((6, 20), 0, wx.ALL, 4)

        self.tc_busitem = wx.TextCtrl(self.panel_3, wx.ID_ANY, "")
        self.tc_busitem.SetMinSize((310, 20))
        self.tc_busitem.SetBackgroundColour(wx.Colour(239, 254, 255))
        sizer_35.Add(self.tc_busitem, 0, wx.ALL, 4)

        sizer_36 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_33.Add(sizer_36, 1, wx.EXPAND, 0)

        sizer_36.Add((60, 20), 0, 0, 0)

        self.b_bus_add = wx.Button(self.panel_3, wx.ID_ANY, "Add ")
        self.b_bus_add.SetMinSize((56, 20))
        self.b_bus_add.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_36.Add(self.b_bus_add, 0, wx.ALL, 4)

        self.b_bus_insert = wx.Button(self.panel_3, wx.ID_ANY, "Insert")
        self.b_bus_insert.SetMinSize((56, 20))
        self.b_bus_insert.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_36.Add(self.b_bus_insert, 0, wx.ALL, 4)

        self.b_bus_child = wx.Button(self.panel_3, wx.ID_ANY, "Child")
        self.b_bus_child.SetMinSize((56, 20))
        self.b_bus_child.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_36.Add(self.b_bus_child, 0, wx.ALL, 4)

        self.b_bus_delete = wx.Button(self.panel_3, wx.ID_ANY, "Delete")
        self.b_bus_delete.SetMinSize((56, 20))
        self.b_bus_delete.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_36.Add(self.b_bus_delete, 0, wx.ALL, 4)

        self.b_bus_rename = wx.Button(self.panel_3, wx.ID_ANY, "Rename")
        self.b_bus_rename.SetMinSize((56, 20))
        self.b_bus_rename.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_36.Add(self.b_bus_rename, 0, wx.ALL, 4)

        sizer_31.Add((4, 20), 0, 0, 0)

        self.notebook_3 = wx.Notebook(self.nb_tab0, wx.ID_ANY)
        self.notebook_3.SetMinSize((700, 430))
        sizer_31.Add(self.notebook_3, 0, wx.ALL | wx.EXPAND, 4)

        self.nb3_root = wx.Panel(self.notebook_3, wx.ID_ANY)
        self.notebook_3.AddPage(self.nb3_root, "Organisation")

        sizer_42 = wx.BoxSizer(wx.VERTICAL)

        sizer_42.Add((20, 6), 0, 0, 0)

        label_23 = wx.StaticText(self.nb3_root, wx.ID_ANY, "Organisation")
        label_23.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_42.Add(label_23, 0, wx.ALL, 4)

        sizer_42.Add((20, 30), 0, 0, 0)

        self.text_ctrl_3 = wx.TextCtrl(self.nb3_root, wx.ID_ANY, "This is the root which supports all business divisions, i.e., it represents the overall business.\n\nThe performance of the business is calcuated as a whole at this level, at the divisonal level, and at the service level.", style=wx.TE_MULTILINE | wx.TE_READONLY | wx.TE_WORDWRAP)
        self.text_ctrl_3.SetMinSize((400, 120))
        sizer_42.Add(self.text_ctrl_3, 0, 0, 0)

        self.nb3_division = wx.Panel(self.notebook_3, wx.ID_ANY)
        self.notebook_3.AddPage(self.nb3_division, "Division")

        sizer_43 = wx.BoxSizer(wx.VERTICAL)

        sizer_51 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_43.Add(sizer_51, 0, wx.EXPAND, 0)

        sizer_51.Add((560, 20), 0, 0, 0)

        self.b_save2b = wx.Button(self.nb3_division, wx.ID_ANY, "Save")
        self.b_save2b.SetMinSize((65, 20))
        self.b_save2b.SetBackgroundColour(wx.Colour(227, 254, 233))
        sizer_51.Add(self.b_save2b, 0, wx.ALL, 4)

        self.st_div_title = wx.StaticText(self.nb3_division, wx.ID_ANY, "Division Title")
        self.st_div_title.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_43.Add(self.st_div_title, 0, wx.ALL, 4)

        sizer_43.Add((20, 10), 0, 0, 0)

        label_8 = wx.StaticText(self.nb3_division, wx.ID_ANY, "Description")
        sizer_43.Add(label_8, 0, wx.ALL, 4)

        self.tc_desc_div = wx.TextCtrl(self.nb3_division, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_WORDWRAP)
        self.tc_desc_div.SetMinSize((400, 120))
        self.tc_desc_div.SetBackgroundColour(wx.Colour(239, 254, 255))
        sizer_43.Add(self.tc_desc_div, 0, wx.ALL, 4)

        sizer_43.Add((25, 250), 0, 0, 0)

        sizer_87 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_43.Add(sizer_87, 0, wx.EXPAND, 0)

        self.c_div_cyrisk = wx.StaticText(self.nb3_division, wx.ID_ANY, "Assessed cyber risk")
        self.c_div_cyrisk.SetMinSize((180, 20))
        self.c_div_cyrisk.SetForegroundColour(wx.Colour(50, 50, 204))
        self.c_div_cyrisk.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_87.Add(self.c_div_cyrisk, 0, wx.ALL, 4)

        self.nb3_service = wx.Panel(self.notebook_3, wx.ID_ANY)
        self.notebook_3.AddPage(self.nb3_service, "Service")

        sizer_44 = wx.BoxSizer(wx.VERTICAL)

        sizer_46 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_44.Add(sizer_46, 0, wx.ALL | wx.EXPAND, 0)

        sizer_46.Add((560, 20), 0, 0, 0)

        self.b_save2c = wx.Button(self.nb3_service, wx.ID_ANY, "Save")
        self.b_save2c.SetMinSize((65, 20))
        self.b_save2c.SetBackgroundColour(wx.Colour(227, 254, 233))
        sizer_46.Add(self.b_save2c, 0, wx.ALL, 4)

        self.st_svc_title = wx.StaticText(self.nb3_service, wx.ID_ANY, "Service Title")
        self.st_svc_title.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_44.Add(self.st_svc_title, 0, wx.ALL, 4)

        sizer_44.Add((20, 10), 0, 0, 0)

        label_40 = wx.StaticText(self.nb3_service, wx.ID_ANY, "Description")
        sizer_44.Add(label_40, 0, wx.ALL, 4)

        self.tc_desc_svc = wx.TextCtrl(self.nb3_service, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_WORDWRAP)
        self.tc_desc_svc.SetMinSize((400, 120))
        self.tc_desc_svc.SetBackgroundColour(wx.Colour(239, 254, 255))
        sizer_44.Add(self.tc_desc_svc, 0, wx.ALL, 4)

        sizer_44.Add((20, 30), 0, 0, 0)

        sizer_82 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_44.Add(sizer_82, 0, wx.EXPAND, 0)

        sizer_82.Add((20, 20), 0, 0, 0)

        label_55 = wx.StaticText(self.nb3_service, wx.ID_ANY, "Direct Service Value($K)")
        label_55.SetMinSize((300, 20))
        sizer_82.Add(label_55, 0, wx.ALL, 4)

        self.tc_value_svc = wx.TextCtrl(self.nb3_service, wx.ID_ANY, "")
        self.tc_value_svc.SetMinSize((80, 24))
        sizer_82.Add(self.tc_value_svc, 0, 0, 0)

        sizer_44.Add((20, 10), 0, 0, 0)

        sizer_70 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_44.Add(sizer_70, 0, wx.EXPAND, 0)

        sizer_70.Add((20, 20), 0, 0, 0)

        label_68 = wx.StaticText(self.nb3_service, wx.ID_ANY, "Enter a percentage between 0-100")
        label_68.SetMinSize((300, 20))
        sizer_70.Add(label_68, 0, wx.LEFT | wx.RIGHT | wx.TOP, 4)

        self.tc_enable_svc = wx.TextCtrl(self.nb3_service, wx.ID_ANY, "")
        self.tc_enable_svc.SetMinSize((80, 20))
        sizer_70.Add(self.tc_enable_svc, 0, 0, 0)

        label_89 = wx.StaticText(self.nb3_service, wx.ID_ANY, "%")
        label_89.SetMinSize((10, 20))
        sizer_70.Add(label_89, 0, wx.LEFT | wx.RIGHT | wx.TOP, 4)

        sizer_45 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_44.Add(sizer_45, 0, wx.EXPAND, 0)

        sizer_45.Add((20, 20), 0, 0, 0)

        label_90 = wx.StaticText(self.nb3_service, wx.ID_ANY, "This represents the indirect value of this service to the business")
        label_90.SetMinSize((400, 20))
        sizer_45.Add(label_90, 0, wx.LEFT | wx.RIGHT, 4)

        sizer_64 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_44.Add(sizer_64, 0, wx.EXPAND, 0)

        sizer_64.Add((20, 20), 0, 0, 0)

        label_91 = wx.StaticText(self.nb3_service, wx.ID_ANY, "It is used to calculate the indirect contribution to the value chain.")
        label_91.SetMinSize((400, 20))
        sizer_64.Add(label_91, 0, wx.BOTTOM | wx.LEFT | wx.RIGHT, 4)

        sizer_44.Add((20, 10), 0, 0, 0)

        sizer_86 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_44.Add(sizer_86, 0, wx.EXPAND, 0)

        sizer_86.Add((20, 20), 0, 0, 0)

        label_69 = wx.StaticText(self.nb3_service, wx.ID_ANY, "Potential cost of data breach or loss ($K)")
        label_69.SetMinSize((300, 40))
        sizer_86.Add(label_69, 0, wx.ALL, 4)

        self.tc_breach_svc = wx.TextCtrl(self.nb3_service, wx.ID_ANY, "")
        self.tc_breach_svc.SetMinSize((80, 24))
        sizer_86.Add(self.tc_breach_svc, 0, 0, 0)

        sizer_44.Add((20, 55), 0, 0, 0)

        sizer_71 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_44.Add(sizer_71, 0, wx.EXPAND, 0)

        self.c_svc_cyrisk = wx.StaticText(self.nb3_service, wx.ID_ANY, "Assessed cyber risk")
        self.c_svc_cyrisk.SetMinSize((180, 20))
        self.c_svc_cyrisk.SetForegroundColour(wx.Colour(50, 50, 204))
        self.c_svc_cyrisk.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_71.Add(self.c_svc_cyrisk, 0, wx.ALL, 4)

        sizer_71.Add((250, 20), 0, 0, 0)

        self.c_svc_cycost = wx.StaticText(self.nb3_service, wx.ID_ANY, "Assessed risk impact")
        self.c_svc_cycost.SetMinSize((200, 20))
        self.c_svc_cycost.SetForegroundColour(wx.Colour(50, 50, 204))
        self.c_svc_cycost.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_71.Add(self.c_svc_cycost, 0, wx.ALL, 4)

        self.nb3_technology = wx.Panel(self.notebook_3, wx.ID_ANY)
        self.notebook_3.AddPage(self.nb3_technology, "Technology")

        sizer_47 = wx.BoxSizer(wx.VERTICAL)

        sizer_48 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_47.Add(sizer_48, 0, wx.ALL | wx.EXPAND, 0)

        sizer_48.Add((560, 20), 0, 0, 0)

        self.b_save2d = wx.Button(self.nb3_technology, wx.ID_ANY, "Save")
        self.b_save2d.SetMinSize((65, 20))
        self.b_save2d.SetBackgroundColour(wx.Colour(227, 254, 233))
        sizer_48.Add(self.b_save2d, 0, wx.ALL, 4)

        self.st_tech_title = wx.StaticText(self.nb3_technology, wx.ID_ANY, "Technology Title")
        self.st_tech_title.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_47.Add(self.st_tech_title, 0, wx.ALL, 4)

        sizer_47.Add((20, 10), 0, 0, 0)

        label_44 = wx.StaticText(self.nb3_technology, wx.ID_ANY, "Description")
        sizer_47.Add(label_44, 0, wx.ALL, 4)

        self.tc_desc_tech = wx.TextCtrl(self.nb3_technology, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_WORDWRAP)
        self.tc_desc_tech.SetMinSize((400, 120))
        self.tc_desc_tech.SetBackgroundColour(wx.Colour(239, 254, 255))
        sizer_47.Add(self.tc_desc_tech, 0, wx.ALL, 4)

        sizer_47.Add((20, 36), 0, 0, 0)

        sizer_78 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_47.Add(sizer_78, 0, wx.EXPAND, 0)

        label_65 = wx.StaticText(self.nb3_technology, wx.ID_ANY, "Platform:")
        label_65.SetMinSize((300, 20))
        sizer_78.Add(label_65, 0, wx.ALL, 4)

        self.tc_platform = wx.TextCtrl(self.nb3_technology, wx.ID_ANY, "")
        self.tc_platform.SetMinSize((120, 20))
        sizer_78.Add(self.tc_platform, 0, wx.ALL, 4)

        sizer_47.Add((20, 20), 0, 0, 0)

        sizer_85 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_47.Add(sizer_85, 0, wx.EXPAND, 0)

        label_66 = wx.StaticText(self.nb3_technology, wx.ID_ANY, "Enter a percentage between 0-100")
        label_66.SetMinSize((300, 20))
        sizer_85.Add(label_66, 0, wx.LEFT | wx.RIGHT | wx.TOP, 4)

        self.tc_factor = wx.TextCtrl(self.nb3_technology, wx.ID_ANY, "")
        self.tc_factor.SetMinSize((45, 20))
        sizer_85.Add(self.tc_factor, 0, wx.LEFT | wx.RIGHT | wx.TOP, 4)

        label_94 = wx.StaticText(self.nb3_technology, wx.ID_ANY, "%")
        sizer_85.Add(label_94, 0, wx.LEFT | wx.RIGHT | wx.TOP, 4)

        label_92 = wx.StaticText(self.nb3_technology, wx.ID_ANY, "This is the impact on the value of the service if the ")
        sizer_47.Add(label_92, 0, wx.LEFT | wx.RIGHT, 4)

        label_93 = wx.StaticText(self.nb3_technology, wx.ID_ANY, "technology is compromised")
        sizer_47.Add(label_93, 0, wx.BOTTOM | wx.LEFT | wx.RIGHT, 4)

        sizer_47.Add((20, 105), 0, 0, 0)

        self.c_risk_tech = wx.StaticText(self.nb3_technology, wx.ID_ANY, "Assessed cyber risk")
        self.c_risk_tech.SetMinSize((180, 20))
        self.c_risk_tech.SetForegroundColour(wx.Colour(50, 50, 204))
        self.c_risk_tech.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_47.Add(self.c_risk_tech, 0, wx.ALL, 4)

        self.nb3_attribute = wx.Panel(self.notebook_3, wx.ID_ANY)
        self.notebook_3.AddPage(self.nb3_attribute, "Attribute")

        sizer_49 = wx.BoxSizer(wx.VERTICAL)

        sizer_50 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_49.Add(sizer_50, 0, wx.ALL | wx.EXPAND, 0)

        sizer_50.Add((560, 20), 0, 0, 0)

        self.b_save2e = wx.Button(self.nb3_attribute, wx.ID_ANY, "Save")
        self.b_save2e.SetMinSize((65, 20))
        self.b_save2e.SetBackgroundColour(wx.Colour(227, 254, 233))
        sizer_50.Add(self.b_save2e, 0, wx.ALL, 4)

        self.st_attr2_title = wx.StaticText(self.nb3_attribute, wx.ID_ANY, "Attribute")
        self.st_attr2_title.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_49.Add(self.st_attr2_title, 0, wx.ALL, 4)

        sizer_49.Add((20, 30), 0, 0, 0)

        sizer_83 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_49.Add(sizer_83, 0, wx.EXPAND, 0)

        label_61 = wx.StaticText(self.nb3_attribute, wx.ID_ANY, "Enter importance as a percentage between 0-100")
        label_61.SetMinSize((400, 20))
        sizer_83.Add(label_61, 0, 0, 0)

        sizer_83.Add((6, 20), 0, 0, 0)

        self.tc_impact2 = wx.TextCtrl(self.nb3_attribute, wx.ID_ANY, "")
        self.tc_impact2.SetMinSize((45, 20))
        sizer_83.Add(self.tc_impact2, 0, 0, 0)

        label_62 = wx.StaticText(self.nb3_attribute, wx.ID_ANY, "%")
        label_62.SetMinSize((10, 20))
        sizer_83.Add(label_62, 0, 0, 0)

        label_87 = wx.StaticText(self.nb3_attribute, wx.ID_ANY, "This is the extent to which the attribute affects the performance")
        sizer_49.Add(label_87, 0, 0, 0)

        label_86 = wx.StaticText(self.nb3_attribute, wx.ID_ANY, "of the technology.  If the technology requires this attribute to be")
        sizer_49.Add(label_86, 0, 0, 0)

        label_88 = wx.StaticText(self.nb3_attribute, wx.ID_ANY, "working properly then this will be entered as 100")
        sizer_49.Add(label_88, 0, 0, 0)

        sizer_49.Add((20, 20), 0, 0, 0)

        sizer_88 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_49.Add(sizer_88, 0, wx.EXPAND, 0)

        label_67 = wx.StaticText(self.nb3_attribute, wx.ID_ANY, "Enter risk level as a percentage between 0-100")
        label_67.SetMinSize((400, 20))
        sizer_88.Add(label_67, 0, 0, 0)

        sizer_88.Add((6, 20), 0, 0, 0)

        self.tc_brisk = wx.TextCtrl(self.nb3_attribute, wx.ID_ANY, "")
        self.tc_brisk.SetMinSize((45, 20))
        sizer_88.Add(self.tc_brisk, 0, 0, 0)

        label_71 = wx.StaticText(self.nb3_attribute, wx.ID_ANY, "%")
        label_71.SetMinSize((10, 20))
        sizer_88.Add(label_71, 0, 0, 0)

        label_42 = wx.StaticText(self.nb3_attribute, wx.ID_ANY, "The risk that this attribute will fail will have been calculated as part")
        sizer_49.Add(label_42, 0, wx.ALL, 0)

        label_50 = wx.StaticText(self.nb3_attribute, wx.ID_ANY, "of the asset risk assessment for this technology. The level of risk as ")
        sizer_49.Add(label_50, 0, 0, 0)

        label_49 = wx.StaticText(self.nb3_attribute, wx.ID_ANY, "detailed in the assessment should be entered here.")
        sizer_49.Add(label_49, 0, 0, 0)

        sizer_49.Add((20, 230), 0, 0, 0)

        sizer_89 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_49.Add(sizer_89, 0, wx.EXPAND, 0)

        self.st_arisk = wx.StaticText(self.nb3_attribute, wx.ID_ANY, "% risk fully adjusted")
        self.st_arisk.SetMinSize((200, 20))
        self.st_arisk.SetForegroundColour(wx.Colour(50, 50, 204))
        self.st_arisk.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_89.Add(self.st_arisk, 0, 0, 0)

        sizer_89.Add((200, 20), 0, 0, 0)

        self.st_alevel = wx.StaticText(self.nb3_attribute, wx.ID_ANY, "Effective risk level")
        self.st_alevel.SetMinSize((200, 20))
        self.st_alevel.SetForegroundColour(wx.Colour(50, 50, 204))
        self.st_alevel.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_89.Add(self.st_alevel, 0, 0, 0)

        sizer_39 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3.Add(sizer_39, 1, wx.EXPAND, 0)

        sizer_39.Add((10, 10), 0, 0, 0)

        label_29 = wx.StaticText(self.nb_tab0, wx.ID_ANY, "@Kiwi")
        label_29.SetMinSize((100, 24))
        sizer_39.Add(label_29, 0, wx.ALL, 4)

        self.nb_tab1 = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.notebook_1.AddPage(self.nb_tab1, "Security")

        sizer_2 = wx.BoxSizer(wx.VERTICAL)

        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_8, 1, wx.EXPAND, 0)

        sizer_7 = wx.BoxSizer(wx.VERTICAL)
        sizer_8.Add(sizer_7, 0, 0, 0)

        label_2 = wx.StaticText(self.nb_tab1, wx.ID_ANY, "Security Aspects")
        label_2.SetMinSize((180, 20))
        label_2.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_7.Add(label_2, 0, 0, 0)

        self.stree = wx.TreeCtrl(self.nb_tab1, wx.ID_ANY)
        self.stree.SetMinSize((400, 410))
        self.root=self.stree.AddRoot("CSMP")
        strategic=self.stree.AppendItem(self.root,"Strategic")
        tactical=self.stree.AppendItem(self.root,"Tactical")
        operational=self.stree.AppendItem(self.root,"Operational")
        sizer_7.Add(self.stree, 0, wx.ALL, 4)

        self.panel_2 = wx.Panel(self.nb_tab1, wx.ID_ANY, style=wx.BORDER_SIMPLE)
        self.panel_2.SetMinSize((400, 94))
        sizer_7.Add(self.panel_2, 0, wx.ALL, 4)

        sizer_5 = wx.BoxSizer(wx.VERTICAL)

        sizer_20 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5.Add(sizer_20, 1, wx.EXPAND, 0)

        label_4 = wx.StaticText(self.panel_2, wx.ID_ANY, "MAINTENANCE")
        label_4.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_20.Add(label_4, 0, wx.ALL, 4)

        sizer_20.Add((200, 20), 0, 0, 0)

        self.b_save1a = wx.Button(self.panel_2, wx.ID_ANY, "Save")
        self.b_save1a.SetMinSize((65, 20))
        self.b_save1a.SetBackgroundColour(wx.Colour(227, 254, 233))
        sizer_20.Add(self.b_save1a, 0, wx.ALL, 4)

        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5.Add(sizer_6, 0, wx.EXPAND, 0)

        label_3 = wx.StaticText(self.panel_2, wx.ID_ANY, "Name:")
        label_3.SetMinSize((40, 20))
        sizer_6.Add(label_3, 0, wx.ALL, 4)

        sizer_6.Add((6, 20), 0, wx.ALL, 4)

        self.tc_secitem = wx.TextCtrl(self.panel_2, wx.ID_ANY, "")
        self.tc_secitem.SetMinSize((310, 20))
        self.tc_secitem.SetBackgroundColour(wx.Colour(239, 254, 255))
        sizer_6.Add(self.tc_secitem, 0, wx.ALL, 4)

        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5.Add(sizer_9, 1, wx.EXPAND, 0)

        sizer_9.Add((60, 20), 0, 0, 0)

        self.b_sec_add = wx.Button(self.panel_2, wx.ID_ANY, "Add ")
        self.b_sec_add.SetMinSize((56, 20))
        self.b_sec_add.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_9.Add(self.b_sec_add, 0, wx.ALL, 4)

        self.b_sec_insert = wx.Button(self.panel_2, wx.ID_ANY, "Insert")
        self.b_sec_insert.SetMinSize((56, 20))
        self.b_sec_insert.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_9.Add(self.b_sec_insert, 0, wx.ALL, 4)

        self.b_sec_child = wx.Button(self.panel_2, wx.ID_ANY, "Child")
        self.b_sec_child.SetMinSize((56, 20))
        self.b_sec_child.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_9.Add(self.b_sec_child, 0, wx.ALL, 4)

        self.b_sec_delete = wx.Button(self.panel_2, wx.ID_ANY, "Delete")
        self.b_sec_delete.SetMinSize((56, 20))
        self.b_sec_delete.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_9.Add(self.b_sec_delete, 0, wx.ALL, 4)

        self.b_sec_rename = wx.Button(self.panel_2, wx.ID_ANY, "Rename")
        self.b_sec_rename.SetMinSize((56, 20))
        self.b_sec_rename.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_9.Add(self.b_sec_rename, 0, wx.ALL, 4)

        sizer_8.Add((4, 20), 0, 0, 0)

        self.notebook_2 = wx.Notebook(self.nb_tab1, wx.ID_ANY)
        self.notebook_2.SetMinSize((700, 440))
        sizer_8.Add(self.notebook_2, 0, wx.ALL | wx.EXPAND, 4)

        self.nb2_root = wx.Panel(self.notebook_2, wx.ID_ANY)
        self.notebook_2.AddPage(self.nb2_root, "CSMP")

        sizer_29 = wx.BoxSizer(wx.VERTICAL)

        sizer_67 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_29.Add(sizer_67, 0, wx.EXPAND, 0)

        sizer_67.Add((560, 20), 0, 0, 0)

        self.b_save1e = wx.Button(self.nb2_root, wx.ID_ANY, "Save")
        self.b_save1e.SetMinSize((65, 20))
        self.b_save1e.SetBackgroundColour(wx.Colour(227, 254, 233))
        sizer_67.Add(self.b_save1e, 0, wx.ALL, 4)

        st_root_title = wx.StaticText(self.nb2_root, wx.ID_ANY, "Summary Cybersecurity Program")
        st_root_title.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_29.Add(st_root_title, 0, wx.ALL, 4)

        sizer_29.Add((20, 30), 0, 0, 0)

        label_85 = wx.StaticText(self.nb2_root, wx.ID_ANY, "Calculation Tables")
        label_85.SetMinSize((150, 30))
        label_85.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_29.Add(label_85, 0, 0, 0)

        sizer_81 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_29.Add(sizer_81, 0, wx.EXPAND, 0)

        sizer_90 = wx.BoxSizer(wx.VERTICAL)
        sizer_81.Add(sizer_90, 0, wx.EXPAND, 0)

        label_22 = wx.StaticText(self.nb2_root, wx.ID_ANY, "Cyber Risk")
        label_22.SetMinSize((150, 20))
        label_22.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_90.Add(label_22, 0, 0, 0)

        label_27 = wx.StaticText(self.nb2_root, wx.ID_ANY, "Very Low")
        label_27.SetMinSize((150, 15))
        sizer_90.Add(label_27, 0, 0, 0)

        label_28 = wx.StaticText(self.nb2_root, wx.ID_ANY, "Low")
        label_28.SetMinSize((150, 15))
        sizer_90.Add(label_28, 0, 0, 0)

        label_30 = wx.StaticText(self.nb2_root, wx.ID_ANY, "Moderate")
        label_30.SetMinSize((150, 15))
        sizer_90.Add(label_30, 0, 0, 0)

        label_43 = wx.StaticText(self.nb2_root, wx.ID_ANY, "High")
        label_43.SetMinSize((150, 15))
        sizer_90.Add(label_43, 0, 0, 0)

        label_45 = wx.StaticText(self.nb2_root, wx.ID_ANY, "Extreme")
        label_45.SetMinSize((150, 15))
        sizer_90.Add(label_45, 0, 0, 0)

        sizer_90.Add((150, 20), 0, 0, 0)

        label_46 = wx.StaticText(self.nb2_root, wx.ID_ANY, "Process Maturity ")
        label_46.SetMinSize((150, 20))
        label_46.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_90.Add(label_46, 0, 0, 0)

        label_47 = wx.StaticText(self.nb2_root, wx.ID_ANY, "Initial")
        label_47.SetMinSize((150, 15))
        sizer_90.Add(label_47, 0, 0, 0)

        label_57 = wx.StaticText(self.nb2_root, wx.ID_ANY, "Informal")
        label_57.SetMinSize((150, 15))
        sizer_90.Add(label_57, 0, 0, 0)

        label_59 = wx.StaticText(self.nb2_root, wx.ID_ANY, "Defined")
        label_59.SetMinSize((150, 15))
        sizer_90.Add(label_59, 0, 0, 0)

        label_60 = wx.StaticText(self.nb2_root, wx.ID_ANY, "Managed")
        label_60.SetMinSize((150, 15))
        sizer_90.Add(label_60, 0, 0, 0)

        label_72 = wx.StaticText(self.nb2_root, wx.ID_ANY, "Optimized")
        label_72.SetMinSize((150, 15))
        sizer_90.Add(label_72, 0, 0, 0)

        sizer_81.Add((20, 20), 0, 0, 0)

        sizer_92 = wx.BoxSizer(wx.VERTICAL)
        sizer_81.Add(sizer_92, 0, wx.EXPAND, 0)

        sizer_92.Add((20, 20), 0, 0, 0)

        self.tc_tab11 = wx.TextCtrl(self.nb2_root, wx.ID_ANY, "")
        self.tc_tab11.SetMinSize((60, 15))
        self.tc_tab11.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_92.Add(self.tc_tab11, 0, 0, 0)

        self.tc_tab12 = wx.TextCtrl(self.nb2_root, wx.ID_ANY, "")
        self.tc_tab12.SetMinSize((60, 15))
        self.tc_tab12.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_92.Add(self.tc_tab12, 0, 0, 0)

        self.tc_tab13 = wx.TextCtrl(self.nb2_root, wx.ID_ANY, "")
        self.tc_tab13.SetMinSize((60, 15))
        self.tc_tab13.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_92.Add(self.tc_tab13, 0, 0, 0)

        self.tc_tab14 = wx.TextCtrl(self.nb2_root, wx.ID_ANY, "")
        self.tc_tab14.SetMinSize((60, 15))
        self.tc_tab14.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_92.Add(self.tc_tab14, 0, 0, 0)

        self.tc_tab15 = wx.TextCtrl(self.nb2_root, wx.ID_ANY, "")
        self.tc_tab15.SetMinSize((60, 15))
        self.tc_tab15.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_92.Add(self.tc_tab15, 0, 0, 0)

        sizer_92.Add((20, 20), 0, 0, 0)

        sizer_92.Add((20, 20), 0, 0, 0)

        self.tc_tab31 = wx.TextCtrl(self.nb2_root, wx.ID_ANY, "")
        self.tc_tab31.SetMinSize((60, 15))
        self.tc_tab31.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_92.Add(self.tc_tab31, 0, 0, 0)

        self.tc_tab32 = wx.TextCtrl(self.nb2_root, wx.ID_ANY, "")
        self.tc_tab32.SetMinSize((60, 15))
        self.tc_tab32.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_92.Add(self.tc_tab32, 0, 0, 0)

        self.tc_tab33 = wx.TextCtrl(self.nb2_root, wx.ID_ANY, "")
        self.tc_tab33.SetMinSize((60, 15))
        self.tc_tab33.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_92.Add(self.tc_tab33, 0, 0, 0)

        self.tc_tab34 = wx.TextCtrl(self.nb2_root, wx.ID_ANY, "")
        self.tc_tab34.SetMinSize((60, 15))
        self.tc_tab34.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_92.Add(self.tc_tab34, 0, 0, 0)

        self.tc_tab35 = wx.TextCtrl(self.nb2_root, wx.ID_ANY, "")
        self.tc_tab35.SetMinSize((60, 15))
        self.tc_tab35.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_92.Add(self.tc_tab35, 0, 0, 0)

        sizer_81.Add((100, 20), 0, 0, 0)

        sizer_91 = wx.BoxSizer(wx.VERTICAL)
        sizer_81.Add(sizer_91, 0, wx.EXPAND, 0)

        label_73 = wx.StaticText(self.nb2_root, wx.ID_ANY, "Control Effectiveness")
        label_73.SetMinSize((150, 20))
        label_73.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_91.Add(label_73, 0, 0, 0)

        label_74 = wx.StaticText(self.nb2_root, wx.ID_ANY, "Partly Effective")
        label_74.SetMinSize((150, 15))
        sizer_91.Add(label_74, 0, 0, 0)

        label_75 = wx.StaticText(self.nb2_root, wx.ID_ANY, "Mostly Effective")
        label_75.SetMinSize((150, 15))
        sizer_91.Add(label_75, 0, 0, 0)

        label_76 = wx.StaticText(self.nb2_root, wx.ID_ANY, "Effective")
        label_76.SetMinSize((150, 15))
        sizer_91.Add(label_76, 0, 0, 0)

        label_77 = wx.StaticText(self.nb2_root, wx.ID_ANY, "Highly Effective")
        label_77.SetMinSize((150, 15))
        sizer_91.Add(label_77, 0, 0, 0)

        label_78 = wx.StaticText(self.nb2_root, wx.ID_ANY, "Extremely Effective")
        label_78.SetMinSize((150, 15))
        sizer_91.Add(label_78, 0, 0, 0)

        sizer_81.Add((20, 20), 0, 0, 0)

        sizer_93 = wx.BoxSizer(wx.VERTICAL)
        sizer_81.Add(sizer_93, 0, wx.EXPAND, 0)

        sizer_93.Add((20, 20), 0, 0, 0)

        self.tc_tab21 = wx.TextCtrl(self.nb2_root, wx.ID_ANY, "")
        self.tc_tab21.SetMinSize((60, 15))
        self.tc_tab21.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_93.Add(self.tc_tab21, 0, 0, 0)

        self.tc_tab22 = wx.TextCtrl(self.nb2_root, wx.ID_ANY, "")
        self.tc_tab22.SetMinSize((60, 15))
        self.tc_tab22.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_93.Add(self.tc_tab22, 0, 0, 0)

        self.tc_tab23 = wx.TextCtrl(self.nb2_root, wx.ID_ANY, "")
        self.tc_tab23.SetMinSize((60, 15))
        self.tc_tab23.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_93.Add(self.tc_tab23, 0, 0, 0)

        self.tc_tab24 = wx.TextCtrl(self.nb2_root, wx.ID_ANY, "")
        self.tc_tab24.SetMinSize((60, 15))
        self.tc_tab24.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_93.Add(self.tc_tab24, 0, 0, 0)

        self.tc_tab25 = wx.TextCtrl(self.nb2_root, wx.ID_ANY, "")
        self.tc_tab25.SetMinSize((60, 15))
        self.tc_tab25.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_93.Add(self.tc_tab25, 0, 0, 0)

        sizer_29.Add((20, 150), 0, 0, 0)

        sizer_54 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_29.Add(sizer_54, 1, wx.EXPAND, 0)

        sizer_54.Add((20, 20), 0, 0, 0)

        self.st_cs_maturity = wx.StaticText(self.nb2_root, wx.ID_ANY, "Overall maturity:")
        self.st_cs_maturity.SetMinSize((160, 20))
        self.st_cs_maturity.SetForegroundColour(wx.Colour(50, 50, 204))
        self.st_cs_maturity.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_54.Add(self.st_cs_maturity, 0, wx.ALL, 4)

        sizer_54.Add((220, 20), 0, 0, 0)

        self.st_cs_effect = wx.StaticText(self.nb2_root, wx.ID_ANY, "Overall effectiveness:")
        self.st_cs_effect.SetMinSize((160, 20))
        self.st_cs_effect.SetForegroundColour(wx.Colour(50, 50, 204))
        self.st_cs_effect.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_54.Add(self.st_cs_effect, 0, wx.ALL, 4)

        self.nb2_group = wx.Panel(self.notebook_2, wx.ID_ANY)
        self.notebook_2.AddPage(self.nb2_group, "Group")

        sizer_30 = wx.BoxSizer(wx.VERTICAL)

        sizer_30.Add((20, 6), 0, 0, 0)

        self.st_group_title = wx.StaticText(self.nb2_group, wx.ID_ANY, "Process Group")
        self.st_group_title.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_30.Add(self.st_group_title, 0, wx.ALL, 4)

        sizer_30.Add((20, 30), 0, 0, 0)

        self.tc_desc_sgroup = wx.TextCtrl(self.nb2_group, wx.ID_ANY, "This is the group which aggregates the CSMS processes in the level (Strategic, Tactical or Operational) to which they belong.\n\n", style=wx.TE_MULTILINE | wx.TE_READONLY | wx.TE_WORDWRAP)
        self.tc_desc_sgroup.SetMinSize((400, 120))
        sizer_30.Add(self.tc_desc_sgroup, 0, 0, 0)

        sizer_30.Add((20, 60), 0, 0, 0)

        self.nb2_process = wx.Panel(self.notebook_2, wx.ID_ANY, style=wx.BORDER_SIMPLE)
        self.notebook_2.AddPage(self.nb2_process, "Process")

        sizer_4 = wx.BoxSizer(wx.VERTICAL)

        sizer_28 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(sizer_28, 0, wx.EXPAND, 0)

        sizer_28.Add((560, 20), 0, 0, 0)

        self.b_save1b = wx.Button(self.nb2_process, wx.ID_ANY, "Save")
        self.b_save1b.SetMinSize((65, 20))
        self.b_save1b.SetBackgroundColour(wx.Colour(227, 254, 233))
        sizer_28.Add(self.b_save1b, 0, wx.ALL, 4)

        self.st_proc_title = wx.StaticText(self.nb2_process, wx.ID_ANY, "Process Heading")
        self.st_proc_title.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_4.Add(self.st_proc_title, 0, wx.ALL, 4)

        sizer_4.Add((20, 10), 0, 0, 0)

        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(sizer_10, 0, wx.EXPAND, 0)

        sizer_10.Add((10, 20), 0, 0, 0)

        sizer_11 = wx.BoxSizer(wx.VERTICAL)
        sizer_10.Add(sizer_11, 0, wx.EXPAND, 0)

        label_5 = wx.StaticText(self.nb2_process, wx.ID_ANY, "Description")
        sizer_11.Add(label_5, 0, wx.ALL, 4)

        self.tc_desc_proc = wx.TextCtrl(self.nb2_process, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_WORDWRAP)
        self.tc_desc_proc.SetMinSize((400, 120))
        self.tc_desc_proc.SetBackgroundColour(wx.Colour(239, 254, 255))
        sizer_11.Add(self.tc_desc_proc, 0, wx.ALL, 4)

        sizer_11.Add((25, 10), 0, 0, 0)

        sizer_17 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11.Add(sizer_17, 0, wx.EXPAND, 0)

        label_9 = wx.StaticText(self.nb2_process, wx.ID_ANY, "Maturity")
        label_9.SetMinSize((130, 24))
        label_9.SetForegroundColour(wx.Colour(50, 50, 204))
        label_9.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_17.Add(label_9, 0, wx.ALL, 4)

        sizer_17.Add((6, 20), 0, 0, 0)

        self.ch_opmat = wx.Choice(self.nb2_process, wx.ID_ANY, choices=["Non-existent", "Initial", "Informal", "Defined", "Managed", "Optimized"])
        self.ch_opmat.SetMinSize((240, 24))
        self.ch_opmat.SetBackgroundColour(wx.Colour(239, 254, 255))
        self.ch_opmat.SetSelection(0)
        sizer_17.Add(self.ch_opmat, 0, wx.ALL, 4)

        sizer_10.Add((20, 45), 0, 0, 0)

        sizer_12 = wx.BoxSizer(wx.VERTICAL)
        sizer_10.Add(sizer_12, 0, wx.EXPAND, 0)

        sizer_12.Add((20, 30), 0, 0, 0)

        sizer_13 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_12.Add(sizer_13, 0, wx.EXPAND, 0)

        label_6 = wx.StaticText(self.nb2_process, wx.ID_ANY, "Category:")
        label_6.SetMinSize((80, 24))
        sizer_13.Add(label_6, 0, wx.ALL, 0)

        sizer_13.Add((4, 24), 0, 0, 0)

        self.ch_bre = wx.Choice(self.nb2_process, wx.ID_ANY, choices=["Baseline", "Risk-Informed", "Enhanced"])
        self.ch_bre.SetMinSize((90, 24))
        self.ch_bre.SetBackgroundColour(wx.Colour(239, 254, 255))
        self.ch_bre.SetSelection(0)
        sizer_13.Add(self.ch_bre, 0, wx.ALL, 0)

        sizer_14 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_12.Add(sizer_14, 0, wx.EXPAND, 0)

        label_7 = wx.StaticText(self.nb2_process, wx.ID_ANY, "Importance:")
        label_7.SetMinSize((80, 20))
        sizer_14.Add(label_7, 0, wx.ALL, 0)

        sizer_14.Add((4, 20), 0, wx.ALL, 0)

        self.ch_weight_proc = wx.Choice(self.nb2_process, wx.ID_ANY, choices=["Low", "Medium", "High"])
        self.ch_weight_proc.SetMinSize((90, 20))
        self.ch_weight_proc.SetSelection(0)
        sizer_14.Add(self.ch_weight_proc, 0, 0, 0)

        sizer_4.Add((20, 40), 0, 0, 0)

        sizer_66 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(sizer_66, 0, wx.EXPAND, 0)

        sizer_66.Add((14, 20), 0, 0, 0)

        label_95 = wx.StaticText(self.nb2_process, wx.ID_ANY, "Maturity Customisation")
        label_95.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_66.Add(label_95, 0, wx.BOTTOM | wx.RIGHT | wx.TOP, 4)

        sizer_4.Add((20, 10), 0, 0, 0)

        sizer_22 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(sizer_22, 0, wx.ALL | wx.EXPAND, 0)

        sizer_22.Add((14, 20), 0, 0, 0)

        label_15 = wx.StaticText(self.nb2_process, wx.ID_ANY, "Standard Name")
        label_15.SetMinSize((144, 20))
        sizer_22.Add(label_15, 0, wx.ALL, 0)

        sizer_22.Add((28, 20), 0, 0, 0)

        label_13 = wx.StaticText(self.nb2_process, wx.ID_ANY, "Custom Name")
        label_13.SetMinSize((200, 20))
        sizer_22.Add(label_13, 0, wx.ALL, 0)

        sizer_23 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(sizer_23, 0, wx.EXPAND, 0)

        sizer_23.Add((10, 20), 0, 0, 0)

        label_16 = wx.StaticText(self.nb2_process, wx.ID_ANY, "Initial")
        label_16.SetMinSize((164, 20))
        sizer_23.Add(label_16, 0, wx.ALL, 4)

        self.tc_opmat1 = wx.TextCtrl(self.nb2_process, wx.ID_ANY, "Initial")
        self.tc_opmat1.SetMinSize((200, 20))
        sizer_23.Add(self.tc_opmat1, 0, wx.ALL, 4)

        sizer_24 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(sizer_24, 0, wx.EXPAND, 0)

        sizer_24.Add((10, 20), 0, 0, 0)

        label_18 = wx.StaticText(self.nb2_process, wx.ID_ANY, "Informal")
        label_18.SetMinSize((164, 20))
        sizer_24.Add(label_18, 0, wx.ALL, 4)

        self.tc_opmat2 = wx.TextCtrl(self.nb2_process, wx.ID_ANY, "Informal")
        self.tc_opmat2.SetMinSize((200, 20))
        sizer_24.Add(self.tc_opmat2, 0, wx.ALL, 4)

        sizer_25 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(sizer_25, 0, wx.EXPAND, 0)

        sizer_25.Add((10, 20), 0, 0, 0)

        label_19 = wx.StaticText(self.nb2_process, wx.ID_ANY, "Defined")
        label_19.SetMinSize((164, 20))
        sizer_25.Add(label_19, 0, wx.ALL, 4)

        self.tc_opmat3 = wx.TextCtrl(self.nb2_process, wx.ID_ANY, "Defined")
        self.tc_opmat3.SetMinSize((200, 20))
        sizer_25.Add(self.tc_opmat3, 0, wx.ALL, 4)

        sizer_26 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(sizer_26, 0, wx.EXPAND, 0)

        sizer_26.Add((10, 20), 0, 0, 0)

        label_20 = wx.StaticText(self.nb2_process, wx.ID_ANY, "Managed")
        label_20.SetMinSize((164, 20))
        sizer_26.Add(label_20, 0, wx.ALL, 4)

        self.tc_opmat4 = wx.TextCtrl(self.nb2_process, wx.ID_ANY, "Managed")
        self.tc_opmat4.SetMinSize((200, 20))
        sizer_26.Add(self.tc_opmat4, 0, wx.ALL, 4)

        sizer_27 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(sizer_27, 0, wx.EXPAND, 0)

        sizer_27.Add((10, 20), 0, 0, 0)

        label_21 = wx.StaticText(self.nb2_process, wx.ID_ANY, "Optimized")
        label_21.SetMinSize((164, 20))
        sizer_27.Add(label_21, 0, wx.ALL, 4)

        self.tc_opmat5 = wx.TextCtrl(self.nb2_process, wx.ID_ANY, "Optimized")
        self.tc_opmat5.SetMinSize((200, 20))
        sizer_27.Add(self.tc_opmat5, 0, wx.ALL, 4)

        self.nb2_control = wx.Panel(self.notebook_2, wx.ID_ANY, style=wx.BORDER_SIMPLE)
        self.notebook_2.AddPage(self.nb2_control, "Control")

        sizer_37 = wx.BoxSizer(wx.VERTICAL)

        sizer_40 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_37.Add(sizer_40, 0, wx.ALL | wx.EXPAND, 0)

        sizer_40.Add((560, 20), 0, 0, 0)

        self.b_save1c = wx.Button(self.nb2_control, wx.ID_ANY, "Save")
        self.b_save1c.SetMinSize((65, 20))
        self.b_save1c.SetBackgroundColour(wx.Colour(227, 254, 233))
        sizer_40.Add(self.b_save1c, 0, wx.ALL, 4)

        self.st_ctrl_title = wx.StaticText(self.nb2_control, wx.ID_ANY, "Control Heading")
        self.st_ctrl_title.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_37.Add(self.st_ctrl_title, 0, wx.ALL, 4)

        sizer_37.Add((20, 10), 0, 0, 0)

        sizer_55 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_37.Add(sizer_55, 0, wx.ALL | wx.EXPAND, 0)

        sizer_55.Add((10, 20), 0, 0, 0)

        sizer_62 = wx.BoxSizer(wx.VERTICAL)
        sizer_55.Add(sizer_62, 0, wx.EXPAND, 0)

        label_39 = wx.StaticText(self.nb2_control, wx.ID_ANY, "Description")
        sizer_62.Add(label_39, 0, wx.ALL, 4)

        self.tc_desc_ctrl = wx.TextCtrl(self.nb2_control, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_WORDWRAP)
        self.tc_desc_ctrl.SetMinSize((400, 120))
        self.tc_desc_ctrl.SetBackgroundColour(wx.Colour(239, 254, 255))
        sizer_62.Add(self.tc_desc_ctrl, 0, wx.ALL, 4)

        sizer_62.Add((20, 10), 0, 0, 0)

        self.st_effect = wx.StaticText(self.nb2_control, wx.ID_ANY, "Control Effectiveness")
        self.st_effect.SetMinSize((200, 20))
        self.st_effect.SetForegroundColour(wx.Colour(50, 50, 204))
        self.st_effect.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_62.Add(self.st_effect, 0, wx.ALL, 4)

        sizer_55.Add((20, 10), 0, 0, 0)

        sizer_63 = wx.BoxSizer(wx.VERTICAL)
        sizer_55.Add(sizer_63, 0, wx.EXPAND, 0)

        sizer_63.Add((20, 44), 0, 0, 0)

        sizer_65 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_63.Add(sizer_65, 0, wx.EXPAND, 0)

        label_41 = wx.StaticText(self.nb2_control, wx.ID_ANY, "Importance:")
        label_41.SetMinSize((90, 20))
        sizer_65.Add(label_41, 0, wx.ALL, 0)

        sizer_65.Add((4, 20), 0, wx.ALL, 0)

        self.ch_weight_ctrl = wx.Choice(self.nb2_control, wx.ID_ANY, choices=["Low", "Medium", "High"])
        self.ch_weight_ctrl.SetMinSize((90, 20))
        self.ch_weight_ctrl.SetSelection(1)
        sizer_65.Add(self.ch_weight_ctrl, 0, 0, 0)

        sizer_37.Add((20, 45), 0, 0, 0)

        sizer_94 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_37.Add(sizer_94, 0, wx.EXPAND, 0)

        sizer_94.Add((14, 20), 0, 0, 0)

        label_31 = wx.StaticText(self.nb2_control, wx.ID_ANY, "Effectiveness Customisation")
        label_31.SetMinSize((300, 20))
        label_31.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_94.Add(label_31, 0, wx.BOTTOM | wx.RIGHT | wx.TOP, 0)

        sizer_37.Add((20, 10), 0, 0, 0)

        sizer_56 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_37.Add(sizer_56, 0, wx.ALL | wx.EXPAND, 0)

        sizer_56.Add((14, 10), 0, 0, 0)

        label_32 = wx.StaticText(self.nb2_control, wx.ID_ANY, "Standard Name")
        label_32.SetMinSize((120, 20))
        sizer_56.Add(label_32, 0, wx.ALL, 0)

        sizer_56.Add((12, 20), 0, 0, 0)

        label_33 = wx.StaticText(self.nb2_control, wx.ID_ANY, "Custom Name")
        label_33.SetMinSize((200, 20))
        sizer_56.Add(label_33, 0, wx.ALL, 0)

        sizer_57 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_37.Add(sizer_57, 0, wx.EXPAND, 0)

        sizer_57.Add((10, 20), 0, 0, 0)

        label_34 = wx.StaticText(self.nb2_control, wx.ID_ANY, "Partly Effective")
        label_34.SetMinSize((120, 20))
        sizer_57.Add(label_34, 0, wx.ALL, 4)

        self.tc_effect1 = wx.TextCtrl(self.nb2_control, wx.ID_ANY, "Initial")
        self.tc_effect1.SetMinSize((200, 20))
        sizer_57.Add(self.tc_effect1, 0, wx.ALL, 4)

        sizer_58 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_37.Add(sizer_58, 0, wx.EXPAND, 0)

        sizer_58.Add((10, 20), 0, 0, 0)

        label_35 = wx.StaticText(self.nb2_control, wx.ID_ANY, "Mostly Effective")
        label_35.SetMinSize((120, 20))
        sizer_58.Add(label_35, 0, wx.ALL, 4)

        self.tc_effect2 = wx.TextCtrl(self.nb2_control, wx.ID_ANY, "Informal")
        self.tc_effect2.SetMinSize((200, 20))
        sizer_58.Add(self.tc_effect2, 0, wx.ALL, 4)

        sizer_59 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_37.Add(sizer_59, 0, wx.EXPAND, 0)

        sizer_59.Add((10, 20), 0, 0, 0)

        label_36 = wx.StaticText(self.nb2_control, wx.ID_ANY, "Effective")
        label_36.SetMinSize((120, 20))
        sizer_59.Add(label_36, 0, wx.ALL, 4)

        self.tc_effect3 = wx.TextCtrl(self.nb2_control, wx.ID_ANY, "Defined")
        self.tc_effect3.SetMinSize((200, 20))
        sizer_59.Add(self.tc_effect3, 0, wx.ALL, 4)

        sizer_60 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_37.Add(sizer_60, 0, wx.EXPAND, 0)

        sizer_60.Add((10, 20), 0, 0, 0)

        label_37 = wx.StaticText(self.nb2_control, wx.ID_ANY, "Highly Effective")
        label_37.SetMinSize((120, 20))
        sizer_60.Add(label_37, 0, wx.ALL, 4)

        self.tc_effect4 = wx.TextCtrl(self.nb2_control, wx.ID_ANY, "Managed")
        self.tc_effect4.SetMinSize((200, 20))
        sizer_60.Add(self.tc_effect4, 0, wx.ALL, 4)

        sizer_61 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_37.Add(sizer_61, 0, wx.EXPAND, 0)

        sizer_61.Add((10, 20), 0, 0, 0)

        label_38 = wx.StaticText(self.nb2_control, wx.ID_ANY, "Extremely Effective")
        label_38.SetMinSize((120, 20))
        sizer_61.Add(label_38, 0, wx.ALL, 4)

        self.tc_effect5 = wx.TextCtrl(self.nb2_control, wx.ID_ANY, "Optimized")
        self.tc_effect5.SetMinSize((200, 20))
        sizer_61.Add(self.tc_effect5, 0, wx.ALL, 4)

        self.nb2_attribute = wx.Panel(self.notebook_2, wx.ID_ANY)
        self.notebook_2.AddPage(self.nb2_attribute, "Attribute")

        sizer_38 = wx.BoxSizer(wx.VERTICAL)

        sizer_41 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_38.Add(sizer_41, 0, wx.ALL | wx.EXPAND, 0)

        sizer_41.Add((560, 20), 0, 0, 0)

        self.b_save1d = wx.Button(self.nb2_attribute, wx.ID_ANY, "Save")
        self.b_save1d.SetMinSize((65, 20))
        self.b_save1d.SetBackgroundColour(wx.Colour(227, 254, 233))
        sizer_41.Add(self.b_save1d, 0, wx.ALL, 4)

        self.st_attr1_title = wx.StaticText(self.nb2_attribute, wx.ID_ANY, "Attribute")
        self.st_attr1_title.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_38.Add(self.st_attr1_title, 0, wx.ALL, 4)

        sizer_38.Add((20, 30), 0, 0, 0)

        sizer_84 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_38.Add(sizer_84, 0, wx.EXPAND, 0)

        label_63 = wx.StaticText(self.nb2_attribute, wx.ID_ANY, "Enter a percentage between 0-100")
        label_63.SetMinSize((300, 20))
        sizer_84.Add(label_63, 0, wx.LEFT | wx.RIGHT | wx.TOP, 4)

        sizer_84.Add((6, 20), 0, wx.LEFT | wx.RIGHT | wx.TOP, 4)

        self.tc_impact1 = wx.TextCtrl(self.nb2_attribute, wx.ID_ANY, "")
        self.tc_impact1.SetMinSize((45, 20))
        sizer_84.Add(self.tc_impact1, 0, wx.LEFT | wx.RIGHT | wx.TOP, 4)

        label_64 = wx.StaticText(self.nb2_attribute, wx.ID_ANY, "%")
        label_64.SetMinSize((10, 20))
        sizer_84.Add(label_64, 0, wx.LEFT | wx.RIGHT | wx.TOP, 4)

        label_98 = wx.StaticText(self.nb2_attribute, wx.ID_ANY, "This is the level of impact the attribute has on the performance ")
        sizer_38.Add(label_98, 0, wx.LEFT | wx.RIGHT, 4)

        label_99 = wx.StaticText(self.nb2_attribute, wx.ID_ANY, "of the control")
        sizer_38.Add(label_99, 0, wx.BOTTOM | wx.LEFT | wx.RIGHT, 4)

        sizer_21 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_21, 1, wx.EXPAND, 0)

        sizer_21.Add((10, 10), 0, 0, 0)

        label_12 = wx.StaticText(self.nb_tab1, wx.ID_ANY, "@Kiwi")
        label_12.SetMinSize((100, 24))
        sizer_21.Add(label_12, 0, wx.ALL, 4)

        self.nb_tab2 = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.notebook_1.AddPage(self.nb_tab2, "Attribute")

        sizer_16 = wx.BoxSizer(wx.VERTICAL)

        sizer_15 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_16.Add(sizer_15, 1, wx.EXPAND, 0)

        sizer_19 = wx.BoxSizer(wx.VERTICAL)
        sizer_15.Add(sizer_19, 0, 0, 0)

        label_11 = wx.StaticText(self.nb_tab2, wx.ID_ANY, "Attributes")
        label_11.SetMinSize((180, 20))
        label_11.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_19.Add(label_11, 0, 0, 0)

        self.atree = wx.TreeCtrl(self.nb_tab2, wx.ID_ANY)
        self.atree.SetMinSize((400, 410))
        self.root=self.atree.AddRoot("CSMP")
        sizer_19.Add(self.atree, 0, wx.ALL, 4)

        self.panel_5 = wx.Panel(self.nb_tab2, wx.ID_ANY, style=wx.BORDER_SIMPLE)
        self.panel_5.SetMinSize((400, 94))
        sizer_19.Add(self.panel_5, 0, wx.ALL, 4)

        sizer_68 = wx.BoxSizer(wx.VERTICAL)

        sizer_69 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_68.Add(sizer_69, 1, wx.EXPAND, 0)

        label_51 = wx.StaticText(self.panel_5, wx.ID_ANY, "MAINTENANCE")
        label_51.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_69.Add(label_51, 0, wx.ALL, 4)

        sizer_69.Add((200, 20), 0, 0, 0)

        self.b_save3a = wx.Button(self.panel_5, wx.ID_ANY, "Save")
        self.b_save3a.SetMinSize((65, 20))
        self.b_save3a.SetBackgroundColour(wx.Colour(227, 254, 233))
        sizer_69.Add(self.b_save3a, 0, wx.ALL, 4)

        sizer_73 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_68.Add(sizer_73, 0, wx.EXPAND, 0)

        label_52 = wx.StaticText(self.panel_5, wx.ID_ANY, "Name:")
        label_52.SetMinSize((40, 20))
        sizer_73.Add(label_52, 0, wx.ALL, 4)

        sizer_73.Add((6, 20), 0, wx.ALL, 4)

        self.tc_attribute = wx.TextCtrl(self.panel_5, wx.ID_ANY, "")
        self.tc_attribute.SetMinSize((310, 20))
        self.tc_attribute.SetBackgroundColour(wx.Colour(239, 254, 255))
        sizer_73.Add(self.tc_attribute, 0, wx.ALL, 4)

        sizer_74 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_68.Add(sizer_74, 1, wx.EXPAND, 0)

        sizer_74.Add((60, 20), 0, 0, 0)

        self.b_attr_add = wx.Button(self.panel_5, wx.ID_ANY, "Add ")
        self.b_attr_add.SetMinSize((56, 20))
        self.b_attr_add.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_74.Add(self.b_attr_add, 0, wx.ALL, 4)

        self.b_attr_insert = wx.Button(self.panel_5, wx.ID_ANY, "Insert")
        self.b_attr_insert.SetMinSize((56, 20))
        self.b_attr_insert.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_74.Add(self.b_attr_insert, 0, wx.ALL, 4)

        self.b_attr_child = wx.Button(self.panel_5, wx.ID_ANY, "Child")
        self.b_attr_child.SetMinSize((56, 20))
        self.b_attr_child.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_74.Add(self.b_attr_child, 0, wx.ALL, 4)

        self.b_attr_delete = wx.Button(self.panel_5, wx.ID_ANY, "Delete")
        self.b_attr_delete.SetMinSize((56, 20))
        self.b_attr_delete.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_74.Add(self.b_attr_delete, 0, wx.ALL, 4)

        self.b_attr_rename = wx.Button(self.panel_5, wx.ID_ANY, "Rename")
        self.b_attr_rename.SetMinSize((56, 20))
        self.b_attr_rename.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_74.Add(self.b_attr_rename, 0, wx.ALL, 4)

        sizer_15.Add((10, 20), 0, 0, 0)

        self.notebook_4 = wx.Notebook(self.nb_tab2, wx.ID_ANY)
        self.notebook_4.SetMinSize((700, 440))
        sizer_15.Add(self.notebook_4, 0, wx.EXPAND, 0)

        self.nb4_root = wx.Panel(self.notebook_4, wx.ID_ANY)
        self.notebook_4.AddPage(self.nb4_root, "CSMP")

        sizer_76 = wx.BoxSizer(wx.VERTICAL)

        sizer_76.Add((20, 6), 0, 0, 0)

        label_54 = wx.StaticText(self.nb4_root, wx.ID_ANY, "Attribute Root ")
        label_54.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_76.Add(label_54, 0, wx.ALL, 4)

        sizer_76.Add((20, 30), 0, 0, 0)

        self.text_ctrl_4 = wx.TextCtrl(self.nb4_root, wx.ID_ANY, "This is the root of the attribute taxonomy.  Each attribute is grouped into areas of applicability. Each attribute represents an outcome from delivering a security service.\n\nThe taxonomy is taken from the SABSA Enterprise Security Architecture Framework but may be customised as required.", style=wx.TE_MULTILINE | wx.TE_READONLY | wx.TE_WORDWRAP)
        self.text_ctrl_4.SetMinSize((400, 120))
        sizer_76.Add(self.text_ctrl_4, 0, 0, 0)

        self.nb4_group = wx.Panel(self.notebook_4, wx.ID_ANY)
        self.notebook_4.AddPage(self.nb4_group, "Group")

        sizer_77 = wx.BoxSizer(wx.VERTICAL)

        sizer_77.Add((20, 30), 0, 0, 0)

        self.st_taxgroup_title = wx.StaticText(self.nb4_group, wx.ID_ANY, "Taxonomy Group Title")
        self.st_taxgroup_title.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_77.Add(self.st_taxgroup_title, 0, wx.ALL, 4)

        sizer_77.Add((20, 30), 0, 0, 0)

        self.text_ctrl_5 = wx.TextCtrl(self.nb4_group, wx.ID_ANY, "The taxonomy group provides a means of grouping attributes in a way which helps analysts select the appropriate attributes when developing the architecture. It does not affect howm attributes are used in controls or technologies.", style=wx.TE_MULTILINE | wx.TE_READONLY | wx.TE_WORDWRAP)
        self.text_ctrl_5.SetMinSize((400, 120))
        sizer_77.Add(self.text_ctrl_5, 0, 0, 0)

        self.nb4_attribute = wx.Panel(self.notebook_4, wx.ID_ANY)
        self.notebook_4.AddPage(self.nb4_attribute, "Attribute")

        sizer_79 = wx.BoxSizer(wx.VERTICAL)

        sizer_80 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_79.Add(sizer_80, 0, wx.EXPAND, 0)

        sizer_80.Add((560, 20), 0, 0, 0)

        self.b_save3b = wx.Button(self.nb4_attribute, wx.ID_ANY, "Save")
        self.b_save3b.SetMinSize((65, 20))
        self.b_save3b.SetBackgroundColour(wx.Colour(227, 254, 233))
        sizer_80.Add(self.b_save3b, 0, wx.ALL, 4)

        self.st_attribute_title = wx.StaticText(self.nb4_attribute, wx.ID_ANY, "Attrribute Title")
        self.st_attribute_title.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_79.Add(self.st_attribute_title, 0, wx.ALL, 4)

        sizer_79.Add((20, 10), 0, 0, 0)

        label_56 = wx.StaticText(self.nb4_attribute, wx.ID_ANY, "Description")
        sizer_79.Add(label_56, 0, wx.ALL, 4)

        sizer_18 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_79.Add(sizer_18, 0, wx.EXPAND, 0)

        self.tc_desc_attribute = wx.TextCtrl(self.nb4_attribute, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_WORDWRAP)
        self.tc_desc_attribute.SetMinSize((400, 140))
        self.tc_desc_attribute.SetBackgroundColour(wx.Colour(239, 254, 255))
        sizer_18.Add(self.tc_desc_attribute, 0, wx.ALL, 4)

        sizer_18.Add((20, 20), 0, 0, 0)

        sizer_53 = wx.BoxSizer(wx.VERTICAL)
        sizer_18.Add(sizer_53, 0, wx.EXPAND, 0)

        self.clink = wx.Choice(self.nb4_attribute, wx.ID_ANY, choices=["Controls", "Technologies"])
        self.clink.SetMinSize((400, 20))
        self.clink.SetSelection(0)
        sizer_53.Add(self.clink, 0, wx.ALL, 4)

        self.lblink = wx.ListBox(self.nb4_attribute, wx.ID_ANY, choices=["Placeholder"], style=wx.LB_SINGLE | wx.LB_SORT)
        self.lblink.SetMinSize((400, 110))
        self.lblink.SetSelection(0)
        sizer_53.Add(self.lblink, 0, wx.ALL, 4)

        sizer_79.Add((20, 30), 0, 0, 0)

        label_58 = wx.StaticText(self.nb4_attribute, wx.ID_ANY, "Risk Measurement Approach")
        label_58.SetMinSize((180, 20))
        sizer_79.Add(label_58, 0, 0, 0)

        self.tc_risk_measure = wx.TextCtrl(self.nb4_attribute, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_WORDWRAP)
        self.tc_risk_measure.SetMinSize((400, 60))
        self.tc_risk_measure.SetBackgroundColour(wx.Colour(239, 254, 255))
        sizer_79.Add(self.tc_risk_measure, 0, 0, 0)

        sizer_79.Add((20, 20), 0, 0, 0)

        sizer_52 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_79.Add(sizer_52, 0, wx.EXPAND, 0)

        label_70 = wx.StaticText(self.nb4_attribute, wx.ID_ANY, "Enter a percentage between 0-100")
        label_70.SetMinSize((300, 20))
        sizer_52.Add(label_70, 0, wx.LEFT | wx.RIGHT | wx.TOP, 4)

        self.tc_override = wx.TextCtrl(self.nb4_attribute, wx.ID_ANY, "")
        self.tc_override.SetMinSize((88, 20))
        sizer_52.Add(self.tc_override, 0, wx.LEFT | wx.TOP, 4)

        label_1 = wx.StaticText(self.nb4_attribute, wx.ID_ANY, "%")
        label_1.SetMinSize((10, 20))
        sizer_52.Add(label_1, 0, wx.RIGHT | wx.TOP, 4)

        label_96 = wx.StaticText(self.nb4_attribute, wx.ID_ANY, "If you wish to override the automatic calculation of attribute risk ")
        sizer_79.Add(label_96, 0, wx.LEFT | wx.RIGHT, 4)

        label_97 = wx.StaticText(self.nb4_attribute, wx.ID_ANY, "you can enter a risk% here. If zero, the calculated value will be used.")
        sizer_79.Add(label_97, 0, wx.BOTTOM | wx.LEFT | wx.RIGHT, 4)

        sizer_79.Add((20, 50), 0, 0, 0)

        sizer_72 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_79.Add(sizer_72, 0, wx.EXPAND, 0)

        self.st_adjusted_risk = wx.StaticText(self.nb4_attribute, wx.ID_ANY, "Adjusted risk:")
        self.st_adjusted_risk.SetMinSize((120, 20))
        self.st_adjusted_risk.SetForegroundColour(wx.Colour(50, 50, 204))
        self.st_adjusted_risk.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_72.Add(self.st_adjusted_risk, 0, wx.ALL, 4)

        sizer_72.Add((300, 20), 0, 0, 0)

        self.st_attr_rating = wx.StaticText(self.nb4_attribute, wx.ID_ANY, "Rating:")
        self.st_attr_rating.SetMinSize((120, 20))
        self.st_attr_rating.SetForegroundColour(wx.Colour(50, 50, 204))
        self.st_attr_rating.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_72.Add(self.st_attr_rating, 0, wx.ALL, 4)

        sizer_75 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_16.Add(sizer_75, 1, wx.EXPAND, 0)

        sizer_75.Add((10, 10), 0, 0, 0)

        label_53 = wx.StaticText(self.nb_tab2, wx.ID_ANY, "@Kiwi")
        label_53.SetMinSize((100, 24))
        sizer_75.Add(label_53, 0, wx.ALL, 4)

        self.nb4_attribute.SetSizer(sizer_79)

        self.nb4_group.SetSizer(sizer_77)

        self.nb4_root.SetSizer(sizer_76)

        self.panel_5.SetSizer(sizer_68)

        self.nb_tab2.SetSizer(sizer_16)

        self.nb2_attribute.SetSizer(sizer_38)

        self.nb2_control.SetSizer(sizer_37)

        self.nb2_process.SetSizer(sizer_4)

        self.nb2_group.SetSizer(sizer_30)

        self.nb2_root.SetSizer(sizer_29)

        self.panel_2.SetSizer(sizer_5)

        self.nb_tab1.SetSizer(sizer_2)

        self.nb3_attribute.SetSizer(sizer_49)

        self.nb3_technology.SetSizer(sizer_47)

        self.nb3_service.SetSizer(sizer_44)

        self.nb3_division.SetSizer(sizer_43)

        self.nb3_root.SetSizer(sizer_42)

        self.panel_3.SetSizer(sizer_33)

        self.nb_tab0.SetSizer(sizer_3)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()

        self.btree.Bind(wx.EVT_TREE_ITEM_ACTIVATED, self.on_btree_item)
        self.btree.Bind(wx.EVT_TREE_SEL_CHANGED, self.on_btree_change)
        self.b_save2a.Bind(wx.EVT_BUTTON, self.on_save_btree)
        self.b_bus_add.Bind(wx.EVT_BUTTON, self.on_add_busitem)
        self.b_bus_insert.Bind(wx.EVT_BUTTON, self.on_insert_busitem)
        self.b_bus_child.Bind(wx.EVT_BUTTON, self.on_child_busitem)
        self.b_bus_delete.Bind(wx.EVT_BUTTON, self.on_delete_busitem)
        self.b_bus_rename.Bind(wx.EVT_BUTTON, self.on_rename_busitem)
        self.b_save2b.Bind(wx.EVT_BUTTON, self.on_save_division)
        self.b_save2c.Bind(wx.EVT_BUTTON, self.on_save_service)
        self.b_save2d.Bind(wx.EVT_BUTTON, self.on_save_technology)
        self.b_save2e.Bind(wx.EVT_BUTTON, self.on_save_attribute2)
        self.stree.Bind(wx.EVT_TREE_ITEM_ACTIVATED, self.on_stree_item)
        self.stree.Bind(wx.EVT_TREE_SEL_CHANGED, self.on_stree_change)
        self.b_save1a.Bind(wx.EVT_BUTTON, self.on_save_stree)
        self.b_sec_add.Bind(wx.EVT_BUTTON, self.on_add_secitem)
        self.b_sec_insert.Bind(wx.EVT_BUTTON, self.on_insert_secitem)
        self.b_sec_child.Bind(wx.EVT_BUTTON, self.on_child_secitem)
        self.b_sec_delete.Bind(wx.EVT_BUTTON, self.on_delete_secitem)
        self.b_sec_rename.Bind(wx.EVT_BUTTON, self.on_rename_secitem)
        self.b_save1e.Bind(wx.EVT_BUTTON, self.on_save_tables)
        self.b_save1b.Bind(wx.EVT_BUTTON, self.on_save_process)
        self.b_save1c.Bind(wx.EVT_BUTTON, self.on_save_control)
        self.b_save1d.Bind(wx.EVT_BUTTON, self.on_save_attribute1)
        self.atree.Bind(wx.EVT_TREE_ITEM_ACTIVATED, self.on_atree_item)
        self.atree.Bind(wx.EVT_TREE_SEL_CHANGED, self.on_atree_change)
        self.b_save3a.Bind(wx.EVT_BUTTON, self.on_save_atree)
        self.b_attr_add.Bind(wx.EVT_BUTTON, self.on_add_attr)
        self.b_attr_insert.Bind(wx.EVT_BUTTON, self.on_insert_attr)
        self.b_attr_child.Bind(wx.EVT_BUTTON, self.on_child_attr)
        self.b_attr_delete.Bind(wx.EVT_BUTTON, self.on_delete_attr)
        self.b_attr_rename.Bind(wx.EVT_BUTTON, self.on_rename_attr)
        self.b_save3b.Bind(wx.EVT_BUTTON, self.on_save_attribute3)
        self.clink.Bind(wx.EVT_CHOICE, self.on_clink)
        # end wxGlade
        self.load_sdb() 

# ******************************************************************
# Load/Save main trees                                             *
# ******************************************************************
#
# Get type of security tree node
    def get_levels(self):
        level=0
        item=self.stree.GetSelection()
        while item!=self.stree.GetRootItem():
           level=level+1
           item=self.stree.GetItemParent(item)         
        return ["Root","Group","Process","Control","Attribute"][level]
    def get_levelb(self):
        level=0
        item=self.btree.GetSelection()
        while item!=self.btree.GetRootItem():
           level=level+1
           item=self.btree.GetItemParent(item)         
        return ["Root","Division","Service","Technology","Attribute"][level]
    def get_levela(self):
        level=0
        item=self.atree.GetSelection()
        while item!=self.atree.GetRootItem():
           level=level+1
           item=self.atree.GetItemParent(item)         
        return ["Root","Group","Attribute"][level]
#
# Load database
    def load_sdb(self):
        conn=None
        try:
            conn=sqlite3.connect("cobra.db")
            curse=conn.cursor() 
            sqstr="CREATE TABLE IF NOT EXISTS cybersec (description text, maturity int, effective int, tab11 int, tab12 int, tab13 int, tab14 int, tab15 int, tab21 int, tab22 int, tab23 int, tab24 int, tab25 int,tab31 int, tab32 int, tab33 int, tab34 int, tab35 int, tab41 int, tab42 int, tab43 int, tab44 int, tab45 int)"
            curse.execute(sqstr)
            rex=curse.execute("SELECT COUNT(*) FROM cybersec").fetchone()[0]
            if rex==0:
                maturity=risk=0 
                pnames=("description,maturity,effective,")
                pnames=pnames +("tab11,tab12,tab13,tab14,tab15,")
                pnames=pnames+("tab21,tab22,tab23,tab24,tab25,")
                pnames=pnames+("tab31,tab32,tab33,tab34,tab35,")
                pnames=pnames+("tab41,tab42,tab43,tab44,tab45")
                pdata=("Cybersecurity program",maturity,risk)
                pdata=pdata+(factor1[1],factor1[2],factor1[3],factor1[4],factor1[5])
                pdata=pdata+(factor2[1],factor2[2],factor2[3],factor2[4],factor2[5])
                pdata=pdata+(factor3[1],factor3[2],factor3[3],factor3[4],factor3[5])
                pdata=pdata+(factor4[1],factor4[2],factor4[3],factor4[4],factor4[5])
                curse.execute("INSERT INTO cybersec("+pnames+") VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)",pdata)
            sqstr="CREATE TABLE IF NOT EXISTS brms (division text, service text, technology text, attribute text)"
            curse.execute(sqstr)
            bc=curse.execute("SELECT COUNT(*) FROM brms;").fetchone()[0]
            if bc==0:
                curse.execute("INSERT INTO brms(division,service,technology,attribute) VALUES('Executive','','','');")
            sqstr="CREATE TABLE IF NOT EXISTS division (name text PRIMARY KEY, description text, risk int)"
            curse.execute(sqstr)
            sqstr="CREATE TABLE IF NOT EXISTS service (name text PRIMARY KEY, description text, contribution int, risk int, enable int, breach int)"
            curse.execute(sqstr)
            sqstr="CREATE TABLE IF NOT EXISTS technology (name text PRIMARY KEY, description text, platform text, risk int, factor int)"
            curse.execute(sqstr)
            sqstr="CREATE TABLE IF NOT EXISTS csms (sto text, process text, control text, attribute text)"
            curse.execute(sqstr)
            sqstr="CREATE TABLE IF NOT EXISTS process (name text PRIMARY KEY, sto text, bre int, description text, priority int, weight int, maturity int, opmat1 text, opmat2 text, opmat3 text, opmat4 text, opmat5 text, opmat int, capmat1 text, capmat2 text, capmat3 text, capmat4 text, capmat5 text, capmat int)"
            curse.execute(sqstr)
            sqstr="CREATE TABLE IF NOT EXISTS control (name text PRIMARY KEY, description text, weight int, opeff1 text, opeff2 text, opeff3 text, opeff4 text, opeff5 text, opeff int)"
            curse.execute(sqstr)
            sqstr="CREATE TABLE IF NOT EXISTS attr (taxgroup text, attribute text)"
            curse.execute(sqstr)
            ac=curse.execute("SELECT COUNT(*) FROM attr;").fetchone()[0]
            if ac==0:
                curse.execute("INSERT INTO attr(taxgroup,attribute) VALUES('User','');")
                curse.execute("INSERT INTO attr(taxgroup,attribute) VALUES('Management','');")
                curse.execute("INSERT INTO attr(taxgroup,attribute) VALUES('Operational','');")
                curse.execute("INSERT INTO attr(taxgroup,attribute) VALUES('Risk Management','');")
                curse.execute("INSERT INTO attr(taxgroup,attribute) VALUES('Legal-Regulatory','');")
                curse.execute("INSERT INTO attr(taxgroup,attribute) VALUES('Technical','');")
                curse.execute("INSERT INTO attr(taxgroup,attribute) VALUES('Business','');")
            sqstr="CREATE TABLE IF NOT EXISTS attribute (name text, description text, metric text, measure text, rating int, inherent int, adjusted int, x1 int)"
            curse.execute(sqstr)
            sqstr="CREATE TABLE IF NOT EXISTS attribute1 (name text, impact int)"
            curse.execute(sqstr)
            sqstr="CREATE TABLE IF NOT EXISTS attribute2 (tech text, name text, impact int, risk int, adjusted int)"
            curse.execute(sqstr)
            conn.commit()
            #
            #------------------- load business tree
            tlist = curse.execute("SELECT * FROM brms").fetchall()
            if tlist!=None:
              lastd=lasts=lastt="null"  
              for row in tlist:
                if lastd!=row[0]:
                    division=self.btree.AppendItem(self.btree.GetRootItem(),row[0])
                    lastd=row[0] 
                    lasts=lastt="null"
                if row[1]!="":
                    if lasts!=row[1]:
                        service=self.btree.AppendItem(division,row[1])
                        lasts=row[1]
                        lastt="null"                        
                    if row[2]!="":
                        if lastt!=row[2]:
                            technology=self.btree.AppendItem(service,row[2])
                            lastt=row[2]
                        if row[3]!="":
                            attr=self.btree.AppendItem(technology,row[3])                        
            # 
            #------------------- load security tree
            tlist = curse.execute("SELECT * FROM csms").fetchall()
            if tlist!=None:
              lastp=lastc="null"  
              for row in tlist:
                if row[0]=="Strategic":
                    (group,cookie)=self.stree.GetFirstChild(self.stree.GetRootItem())
                if row[0]=="Tactical":
                    (group,cookie)=self.stree.GetFirstChild(self.stree.GetRootItem())
                    group=self.stree.GetNextSibling(group)
                if row[0]=="Operational":
                    group=self.stree.GetLastChild(self.stree.GetRootItem())                
                if row[1]!="":   
                    if lastp!=row[1]:
                        process=self.stree.AppendItem(group,row[1])
                        lastp=row[1] 
                        lastc="null"
                    if row[2]!="":              
                        if lastc!=row[2]:
                            control=self.stree.AppendItem(process,row[2])               
                            lastc=row[2]
                        if row[3]!="": 
                            attr=self.stree.AppendItem(control,row[3])    
            #
            #------------------- load attribute tree
            tlist = curse.execute("SELECT * FROM attr").fetchall()
            if tlist!=None:
              lastg="null"  
              for row in tlist:
                if lastg!=row[0]:
                    group=self.atree.AppendItem(self.atree.GetRootItem(),row[0])
                    lastg=row[0] 
                if row[1]!="":
                        attr=self.atree.AppendItem(group,row[1])                        
            #
            #------------------- Set tables
            curse.execute("SELECT * FROM cybersec")
            row=curse.fetchone()
            for i in range(5):
                factor1[i+1]=row[i+3]
                factor2[i+1]=row[i+8]
                factor3[i+1]=row[i+13]
                factor4[i+1]=row[i+18]
            #
            # --------------------------              
            curse.close()
        except:
            print("Conn Fail")
        finally:
            if conn:
                conn.close()
        self.stree.SelectItem(self.stree.GetRootItem())  
        self.btree.SelectItem(self.btree.GetRootItem())  
        self.atree.SelectItem(self.atree.GetRootItem()) 
        return
#
# Save the business tree
    def on_save_btree(self, event):  # wxGlade: csFrame.<event_handler>
        conn=sqlite3.connect("cobra.db")
        curse = conn.cursor()
        curse.execute("DELETE FROM brms")
        conn.commit
        (item_div,cookie)=self.btree.GetFirstChild(self.btree.GetRootItem())
        while item_div.IsOk():
            division=self.btree.GetItemText(item_div)
            pdata=(division,"","","") 
            curse.execute("INSERT INTO brms(division,service,technology,attribute) VALUES(?,?,?,?)",pdata)
            (item_svc,cookie)=self.btree.GetFirstChild(item_div)             
            while item_svc.IsOk(): 
                service=self.btree.GetItemText(item_svc) 
                pdata=(division,service,"","")
                curse.execute("INSERT INTO brms(division,service,technology,attribute) VALUES(?,?,?,?)",pdata)
                (item_req,cookie)=self.btree.GetFirstChild(item_svc)             
                while item_req.IsOk(): 
                    technology=self.btree.GetItemText(item_req) 
                    pdata=(division,service,technology,"")
                    curse.execute("INSERT INTO brms(division,service,technology,attribute) VALUES(?,?,?,?)",pdata)
                    (item_attr,cookie)=self.btree.GetFirstChild(item_req)             
                    while item_attr.IsOk():
                        pdata=(division,service,technology,self.btree.GetItemText(item_attr))
                        curse.execute("INSERT INTO brms(division,service,technology,attribute) VALUES(?,?,?,?)",pdata)
                        item_attr=self.btree.GetNextSibling(item_attr) 
                    item_req=self.btree.GetNextSibling(item_req)
                item_svc=self.btree.GetNextSibling(item_svc)
            item_div=self.btree.GetNextSibling(item_div)
        curse.close()
        conn.commit()
        conn.close()  
        self.calc_risk()
        wx.MessageBox('Saved Successfully', 'Saving Business', wx.OK) 
        event.Skip()        
#
# Save the security tree
    def on_save_stree(self, event):  # wxGlade: csFrame.<event_handler>
        conn=sqlite3.connect("cobra.db")
        curse = conn.cursor()
        curse.execute("DELETE FROM csms")
        conn.commit()
        (item_sto,cookie)=self.stree.GetFirstChild(self.stree.GetRootItem())
        while item_sto.IsOk():
            sto=self.stree.GetItemText(item_sto)
            pdata=(sto,"","","")              
            curse.execute("INSERT INTO csms(sto,process,control,attribute) VALUES (?,?,?,?)",pdata)
            (item_proc,cookie)=self.stree.GetFirstChild(item_sto)
            while item_proc.IsOk():
                process=self.stree.GetItemText(item_proc)
                pdata=(sto,process,"","")              
                curse.execute("INSERT INTO csms(sto,process,control,attribute) VALUES (?,?,?,?)",pdata)
                (item_ctrl,cookie)=self.stree.GetFirstChild(item_proc)
                while item_ctrl.IsOk():
                    control=self.stree.GetItemText(item_ctrl)
                    pdata=(sto,process,control,"")              
                    curse.execute("INSERT INTO csms(sto,process,control,attribute) VALUES (?,?,?,?)",pdata)
                    (item_attr,cookie)=self.stree.GetFirstChild(item_ctrl)
                    while item_attr.IsOk():
                        pdata=(sto,process,control,self.stree.GetItemText(item_attr))              
                        curse.execute("INSERT INTO csms(sto,process,control,attribute) VALUES (?,?,?,?)",pdata)
                        item_attr=self.stree.GetNextSibling(item_attr)
                    item_ctrl=self.stree.GetNextSibling(item_ctrl) 
                item_proc=self.stree.GetNextSibling(item_proc)
            item_sto=self.stree.GetNextSibling(item_sto)    
        conn.commit()
        curse.close()
        conn.close()        
        self.calc_risk()
        wx.MessageBox('Saved Successfully', 'Saving Security', wx.OK) 
        event.Skip()
#
# Save the attribute tree
    def on_save_atree(self, event):  # wxGlade: csFrame.<event_handler>
        conn=sqlite3.connect("cobra.db")
        curse = conn.cursor()
        curse.execute("DELETE FROM attr")
        conn.commit
        (item_grp,cookie)=self.atree.GetFirstChild(self.atree.GetRootItem())
        while item_grp.IsOk():
            group=self.atree.GetItemText(item_grp)
            pdata=(group,"") 
            curse.execute("INSERT INTO attr(taxgroup,attribute) VALUES(?,?)",pdata)
            (item_attr,cookie)=self.atree.GetFirstChild(item_grp)             
            while item_attr.IsOk(): 
                attribute=self.atree.GetItemText(item_attr) 
                pdata=(group,attribute)
                curse.execute("INSERT INTO attr(taxgroup,attribute) VALUES(?,?)",pdata)
                item_attr=self.atree.GetNextSibling(item_attr)
            item_grp=self.atree.GetNextSibling(item_grp)
        conn.commit()
        curse.close()
        conn.close()  
        wx.MessageBox('Saved Successfully', 'Saving Attributes', wx.OK) 
        event.Skip()


# **********************************************************************
# Check attribute exists                                               *
# **********************************************************************
    def chatter(self,attrib):
        chat=sqlite3.connect("cobra.db")
        ch_curse=chat.cursor()
        chex=True
        ch_curse.execute("SELECT name from attribute where name='"+attrib+"';")
        chname=ch_curse.fetchone()
        ch_curse.close()
        chat.close()
        if chname==None:
          chex=False
        return chex

# **********************************************************************
# Risk, Effectiveness and Maturity Calculations                        *
# **********************************************************************
    def calc_risk(self):
        deb=open("cobra.dbg","w")
        conn=sqlite3.connect("cobra.db")
        curse = conn.cursor()
        #
        #   Calculate Overall maturity of the program
        #   Average maturity (weighted)
        deb.write("Calculate risk factor from process maturity\n")
        tlist=curse.execute("SELECT * FROM process").fetchall()
        cybersec_maturity=cscount=0  
        if tlist!=None:
           for row in tlist:
              cybersec_maturity=cybersec_maturity+row[5]*row[12]
              cscount=cscount+row[5]       
              debug="- "+row[0]+" "+str(row[5])+" "+str(row[12])+"\n"
              deb.write(debug)
        if cscount>0: 
           cybersec_maturity=round(cybersec_maturity/cscount)
           curse.execute("UPDATE cybersec SET maturity="+str(cybersec_maturity))
           conn.commit()
        over_risk=factor3[cybersec_maturity] # % multiplication of risk
        debug="- Overall maturity "+str(cybersec_maturity)+" risk factor = "+str(over_risk)+"\n"    
        deb.write(debug)
        #
        # Update technology risk from link attributes, adjusted by maturity
        # Store attribute risk from link attributes, adjusted by maturity  
        ta=curse.execute("SELECT COUNT(*) FROM attribute;").fetchone()[0]
        if ta>0:
          deb.write("\nCalculate risks from adjusted technology attributes\n")  
          curse.execute("UPDATE attribute SET adjusted=0, x1=0")  
          (ditem,cookie)=self.btree.GetFirstChild(self.btree.GetRootItem())
          while ditem.IsOk():
            dname=self.btree.GetItemText(ditem)    
            debug="- "+dname+"\n"
            deb.write(debug)
            drisk=dsvcs=0
            (sitem,cookie)=self.btree.GetFirstChild(ditem)
            while sitem.IsOk():                             # Loop across all services in the Division
                srisk=0     
                sname=self.btree.GetItemText(sitem)    
                debug="  - "+sname+"\n"
                deb.write(debug)
                (titem,cookie)=self.btree.GetFirstChild(sitem)
                while titem.IsOk():                         # Loop across all technologies used in the service
                    trisk=0                                 # Clear total impact on technology of all attribute performance
                    tname=self.btree.GetItemText(titem)  
                    debug="    - "+tname+"\n"
                    deb.write(debug) 
                    (aitem,cookie)=self.btree.GetFirstChild(titem)
                    while aitem.IsOk():
                        attribute=self.btree.GetItemText(aitem)
                        tech=self.btree.GetItemText(self.btree.GetItemParent(aitem))
                        setstr="SELECT * FROM attribute2 "
                        setstr=setstr+" WHERE (upper(tech)='"+tech.upper()+"' and upper(name)='"+attribute.upper()+"')"
                        row=curse.execute(setstr).fetchone()
                        if row==None:
                            impact=risk=0
                            print("Fault: No tree "+attribute)                            
                        else:
                            impact=row[2] # impact of attribute risk on technology
                            risk=row[3]   # technology-specific base attribute risk (we don't write this back)
                            risk=round(risk*over_risk/100)       # maturity weighted risk
                            adjusted=round(risk*impact/100)      # impact adjusted risk (we write this back)
                            setstr="UPDATE attribute2 SET adjusted="+str(adjusted)
                            setstr=setstr+" WHERE (upper(name)='"+attribute.upper()+"' and upper(tech)='"+tech.upper()+"')"                            
                            curse.execute(setstr)
                            debug="      - "+attribute+" "+str(risk)+" "+str(impact)+"% = "+str(adjusted)+"\n"
                            deb.write(debug)
                            setstr="adjusted=adjusted+"+str(adjusted)+", x1=x1+1" 
                            curse.execute("UPDATE attribute SET "+setstr+" WHERE upper(name)='"+attribute.upper()+"'")
                            trisk=trisk+adjusted            # Update calculated effect on technology from attribute                        
                        aitem=self.btree.GetNextSibling(aitem)
                    trisk=min(100,trisk)
                    curse.execute("UPDATE technology SET risk="+str(trisk)+" WHERE upper(name)='"+tname.upper()+"'")                    
                    debug="    - "+tech+" tech risk "+str(trisk)+"\n" 
                    deb.write(debug) 
                    curse.execute("SELECT factor FROM technology WHERE upper(name)='"+tname.upper()+"'")
                    row=curse.fetchone()
                    srisk=srisk+round(trisk*row[0]/100) # add factored technology risk into service
                    titem=self.btree.GetNextSibling(titem)                      
                # Adjust if over-risked and set in service file
                if srisk>100:
                    srisk=100
                curse.execute("UPDATE service SET risk="+str(srisk)+" WHERE upper(name)='"+sname.upper()+"'")                
                debug="  - "+sname+" service risk "+str(srisk)+"\n"
                deb.write(debug) 
                sitem=self.btree.GetNextSibling(sitem)
                drisk=drisk+srisk
                dsvcs=dsvcs+1 
            if dsvcs>0:                
                drisk=round(drisk/dsvcs)   # average service risks into Division
                curse.execute("UPDATE division SET risk="+str(drisk)+" WHERE upper(name)='"+dname.upper()+"'")
                debug="- "+dname+" divison risk "+str(drisk)+"\n"
                deb.write(debug) 
            ditem=self.btree.GetNextSibling(ditem)
          conn.commit()
          #
          # Level attribute adjusted risk based on number of 
          deb.write("\nCalculate main attribute adjusted risk\n") 
          curse.execute("SELECT name,adjusted,x1 FROM attribute")
          tlist=curse.fetchall()
          for row in tlist:
            adjusted=row[1]
            if row[2]>0:
                adjusted=round(row[1]/row[2])
            curse.execute("UPDATE attribute SET adjusted="+str(adjusted)+",x1=0 WHERE upper(name)='"+row[0].upper()+"'")    
            debug="- "+row[0]+" "+str(adjusted)+"\n"
            deb.write(debug)
          #  
          # Aggregate attribute risks to controls        
          deb.write("\nCalculate control effectiveness\n") 
          (gitem,cookie)=self.stree.GetFirstChild(self.stree.GetRootItem())
          while gitem.IsOk():
            (pitem,cookie)=self.stree.GetFirstChild(gitem)
            debug="- "+self.stree.GetItemText(pitem)+"\n"
            deb.write(debug)
            while pitem.IsOk():
                (citem,cookie)=self.stree.GetFirstChild(pitem)
                while citem.IsOk():
                    control=self.stree.GetItemText(citem)
                    crisk=0
                    (aitem,cookie)=self.stree.GetFirstChild(citem)
                    while aitem.IsOk():
                        attribute=self.stree.GetItemText(aitem) 
                        curse.execute("SELECT * from attribute1 WHERE upper(name)='"+attribute.upper()+"'")                     
                        row1=curse.fetchone()
                        if row1!=None:
                            impact=row1[1]
                            curse.execute("SELECT * FROM attribute WHERE upper(name)='"+attribute.upper()+"'")
                            row2=curse.fetchone()
                            if row2!=None:
                                override=row2[5] 
                                adjusted=row2[6]
                                if impact>0:      
                                    if override>0:
                                        crisk=crisk+round(override*impact/100)
                                    else:
                                        crisk=crisk+round(adjusted*impact/100)
                        aitem=self.stree.GetNextSibling(aitem)               
                    effect=0
                    x=self.stree.GetChildrenCount(citem)
                    if x>0:
                        crisk=round(crisk/x)
                    ceffect=100-crisk    
                    for i in range (6):
                        if ceffect>=factor2[i]:
                            effect=i
                    curse.execute("UPDATE control SET opeff="+str(effect)+" WHERE upper(name)='"+control.upper()+"'")
                    debug="  - "+control+" 100 - "+str(crisk)+" = "+str(effect)+"\n" 
                    deb.write(debug)
                    citem=self.stree.GetNextSibling(citem)   
                pitem=self.stree.GetNextSibling(pitem)            
            gitem=self.stree.GetNextSibling(gitem) 
          conn.commit()
          #
          # Update attribute ratings based on adjusted risk (for all attributes)
          tlist = curse.execute("SELECT name,adjusted FROM attribute").fetchall()
          for row in tlist:
            attribute=row[0]
            adjrisk=row[1]
            rating=0
            for i in range(6):
                if adjrisk>=factor1[i]:
                    rating=i  
            curse.execute("UPDATE attribute SET rating="+str(rating)+" WHERE upper(name)='"+attribute.upper()+"'")            
          conn.commit()
          #                     
          #   Calculate Overall effectiveness of the program
          deb.write("\nCalculate overall program effectiveness\n") 
          tlist = curse.execute("SELECT * FROM control").fetchall()
          effect=ecount=0
          for row in tlist:
            effect=effect+row[8]*row[2]
            ecount=ecount+row[2]
            debug="- "+row[0]+" "+str(row[8])+" "+str(row[2])+"%\n"
            deb.write(debug)
          if ecount>0:            
            effect=round(effect/ecount)
          curse.execute("UPDATE cybersec SET effective="+str(effect))
          debug="-  total effectiveness "+str(effect)+" "+effdef[effect]+"\n"
          deb.write(debug) 
          conn.commit()
#
# -------------------------         
        self.notebook_1.SetSelection(0)
        curse.close()
        conn.close()
        deb.close()
        return
#
# Update Cybersecurity and group maturity
    def on_calculate(self, event):  # wxGlade: csFrame.<event_handler>
        self.calc_risk()
        wx.MessageBox("Calculations complete","Message",wx.OK)
        event.Skip()

#
# **********************************************************************
# Security Display/update/save main content                            *
# **********************************************************************
#
# Show details of the cybersecurity program
#
    def show_details_cybersec(self):
        conn=sqlite3.connect("cobra.db")
        curse=conn.cursor() 
        curse.execute("SELECT * FROM cybersec")
        row=curse.fetchone()
        if row==None:
           self.st_cs_maturity.SetLabel("Overall maturity: ")
           self.st_cs_effect.SetLabel("Overall: ")
        else:
           self.tc_tab11.SetValue(str(row[3]))
           self.tc_tab12.SetValue(str(row[4]))
           self.tc_tab13.SetValue(str(row[5]))
           self.tc_tab14.SetValue(str(row[6]))
           self.tc_tab15.SetValue(str(row[7]))
           self.tc_tab21.SetValue(str(row[8]))
           self.tc_tab22.SetValue(str(row[9]))
           self.tc_tab23.SetValue(str(row[10]))
           self.tc_tab24.SetValue(str(row[11]))
           self.tc_tab25.SetValue(str(row[12]))
           self.tc_tab31.SetValue(str(row[13]))
           self.tc_tab32.SetValue(str(row[14]))
           self.tc_tab33.SetValue(str(row[15]))
           self.tc_tab34.SetValue(str(row[16]))
           self.tc_tab35.SetValue(str(row[17]))
        curse.close()
        conn.close()
        return
#
    def on_save_tables(self, event):  # wxGlade: csFrame.<event_handler>
        item=self.stree.GetSelection()
        conn=sqlite3.connect("cobra.db")
        curse=conn.cursor() 
        setstr="tab11="+self.tc_tab11.GetValue()
        setstr=setstr+",tab12="+self.tc_tab12.GetValue()
        setstr=setstr+",tab13="+self.tc_tab13.GetValue()
        setstr=setstr+",tab14="+self.tc_tab14.GetValue()
        setstr=setstr+",tab15="+self.tc_tab15.GetValue()
        setstr=setstr+",tab21="+self.tc_tab21.GetValue()
        setstr=setstr+",tab22="+self.tc_tab22.GetValue()
        setstr=setstr+",tab23="+self.tc_tab23.GetValue()
        setstr=setstr+",tab24="+self.tc_tab24.GetValue()
        setstr=setstr+",tab25="+self.tc_tab25.GetValue()
        setstr=setstr+",tab31="+self.tc_tab31.GetValue()
        setstr=setstr+",tab32="+self.tc_tab32.GetValue()
        setstr=setstr+",tab33="+self.tc_tab33.GetValue()
        setstr=setstr+",tab34="+self.tc_tab34.GetValue()
        setstr=setstr+",tab35="+self.tc_tab35.GetValue()
        curse.execute("UPDATE cybersec SET "+setstr)
        conn.commit()
        curse.close()
        conn.close()        
        self.calc_risk()
        self.show_details_cybersec()        
        wx.MessageBox('Saved Successfully', 'Saving Tables', wx.OK) 
        event.Skip()
#
# Show details of current tree process
    def show_details_sgroup(self):
        item=self.stree.GetSelection()
        pname=self.stree.GetItemText(item)
        self.st_group_title.SetLabel("Details: "+pname+" Group") 
        if pname=="Strategic":
           self.tc_desc_sgroup.SetValue(d_strategic)
        if pname=="Tactical":
           self.tc_desc_sgroup.SetValue(d_tactical)
        if pname=="Operational":
           self.tc_desc_sgroup.SetValue(d_operational)
        return
#
# Show details of current tree process
    def show_details_process(self):
        item=self.stree.GetSelection()
        pname=self.stree.GetItemText(item)
        self.st_proc_title.SetLabel("Details: "+pname+" Process") 
        conn=sqlite3.connect("cobra.db")
        curse=conn.cursor() 
        curse.execute("SELECT * FROM process WHERE upper(name)='"+pname.upper()+"'")
        row=curse.fetchone()
        if row==None:
            sto=self.stree.GetItemText(self.stree.GetItemParent(item))    
            bre=priority=maturity=opmat=capmat=0
            weight=10
            desc=" "
            pdata=(pname,sto,bre,desc,priority,weight,maturity,matdef[1],matdef[2],matdef[3],matdef[4],matdef[5],opmat,capdef[1],capdef[2],capdef[3],capdef[4],capdef[5],capmat)
            curse.execute("INSERT INTO process(name,sto,bre,description,priority,weight,maturity,opmat1,opmat2,opmat3,opmat4,opmat5,opmat,capmat1,capmat2,capmat3,capmat4,capmat5,capmat) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)",pdata)
            conn.commit()
            curse.execute("SELECT * FROM process WHERE upper(name)='"+pname.upper()+"'")
            item=self.stree.GetSelection()
            row=curse.fetchone()
        self.tc_desc_proc.SetValue(row[3])
        self.ch_bre.SetSelection(row[2])
#        self.tc_weight_proc.SetValue('{0:.2f}'.format(row[5]/10))
        self.ch_weight_proc.SetSelection(int(row[5]/10-1))
        self.tc_opmat1.SetValue(row[7]) 
        self.ch_opmat.SetString(1,row[7])
        self.tc_opmat2.SetValue(row[8]) 
        self.ch_opmat.SetString(2,row[8])
        self.tc_opmat3.SetValue(row[9]) 
        self.ch_opmat.SetString(3,row[9])
        self.tc_opmat4.SetValue(row[10]) 
        self.ch_opmat.SetString(4,row[10])
        self.tc_opmat5.SetValue(row[11]) 
        self.ch_opmat.SetString(5,row[11])
        self.ch_opmat.SetSelection(row[12])
        curse.close()
        conn.close()
        return

    def on_save_process(self, event):  # wxGlade: csFrame.<event_handler>
        item=self.stree.GetSelection()
        pname=self.stree.GetItemText(item)
        conn=sqlite3.connect("cobra.db")
        curse=conn.cursor() 
        setstr="name='"+pname+"'"
        setstr=setstr+",sto='"+self.get_levels()+"'"
        setstr=setstr+",bre="+str(self.ch_bre.GetCurrentSelection())        
        setstr=setstr+",description='"+self.tc_desc_proc.GetValue()+"'"
        setstr=setstr+",weight="+str((self.ch_weight_proc.GetSelection()+1)*10)
#        setstr=setstr+",weight="+str(int(float(self.tc_weight_proc.GetValue())*10))
        setstr=setstr+",priority=0"
        setstr=setstr+",maturity=0"
        setstr=setstr+",opmat="+str(self.ch_opmat.GetCurrentSelection())
        curse.execute("UPDATE process SET "+setstr+" WHERE upper(name)='"+pname.upper()+"'")
        setstr="opmat1='"+self.tc_opmat1.GetValue()+"'"
        setstr=setstr+",opmat2='"+self.tc_opmat2.GetValue()+"'"
        setstr=setstr+",opmat3='"+self.tc_opmat3.GetValue()+"'"
        setstr=setstr+",opmat4='"+self.tc_opmat4.GetValue()+"'"
        setstr=setstr+",opmat5='"+self.tc_opmat5.GetValue()+"'"
        curse.execute("UPDATE process SET "+setstr+" WHERE upper(name)='"+pname.upper()+"'")
        conn.commit()
        curse.close()
        conn.close()        
        self.calc_risk()
        self.show_details_process()        
        wx.MessageBox('Saved Successfully', 'Saving Process', wx.OK) 
        event.Skip()

#
# Show details of current tree control 
    def show_details_control(self):
        item=self.stree.GetSelection()
        pname=self.stree.GetItemText(item)
        self.st_ctrl_title.SetLabel("Details: "+pname+" Control") 
        conn=sqlite3.connect("cobra.db")
        curse=conn.cursor() 
        curse.execute("SELECT * FROM control WHERE upper(name)='"+pname.upper()+"'")
        row=curse.fetchone()
        if row==None:
            effect=0
            weight=10
            desc=" "
            pdata=(pname,desc,weight,effdef[1],effdef[2],effdef[3],effdef[4],effdef[5],effect)
            curse.execute("INSERT INTO control(name,description,weight,opeff1,opeff2,opeff3,opeff4,opeff5,opeff) VALUES (?,?,?,?,?,?,?,?,?)",pdata)
            conn.commit()
            curse.execute("SELECT * FROM control WHERE upper(name)='"+pname.upper()+"'")
            item=self.stree.GetSelection()
            row=curse.fetchone()
        self.tc_desc_ctrl.SetValue(row[1])
        self.ch_weight_ctrl.SetSelection(int(row[2]/10-1))
        self.tc_effect1.SetValue(row[3]) 
        self.tc_effect2.SetValue(row[4]) 
        self.tc_effect3.SetValue(row[5]) 
        self.tc_effect4.SetValue(row[6]) 
        self.tc_effect5.SetValue(row[7]) 
        effect=effdef[0]
        if row[8]!=0:
            effect=row[2+row[8]]        
        self.st_effect.SetLabel("Control is "+effect)
        curse.close()
        conn.close()
        return
    def on_save_control(self, event):  # wxGlade: csFrame.<event_handler>
        item=self.stree.GetSelection()
        pname=self.stree.GetItemText(item)
        conn=sqlite3.connect("cobra.db")
        curse=conn.cursor() 
        setstr="name='"+pname+"'"
        setstr=setstr+",description='"+self.tc_desc_ctrl.GetValue()+"'"
        setstr=setstr+",weight="+str((self.ch_weight_ctrl.GetSelection()+1)*10)
#        setstr=setstr+",weight="+str(int(float(self.tc_weight_ctrl.GetValue())*10))
        curse.execute("UPDATE control SET "+setstr+" WHERE upper(name)='"+pname.upper()+"'")
        setstr="opeff1='"+self.tc_effect1.GetValue()+"'"
        setstr=setstr+",opeff2='"+self.tc_effect2.GetValue()+"'"
        setstr=setstr+",opeff3='"+self.tc_effect3.GetValue()+"'"
        setstr=setstr+",opeff4='"+self.tc_effect4.GetValue()+"'"
        setstr=setstr+",opeff5='"+self.tc_effect5.GetValue()+"'"
        curse.execute("UPDATE control SET "+setstr+" WHERE upper(name)='"+pname.upper()+"'")
        conn.commit()
        curse.close()
        conn.close()        
        self.calc_risk()
        self.show_details_control()        
        wx.MessageBox('Saved Successfully', 'Saving Control', wx.OK) 
        event.Skip()
#
# Show details of current tree  
    def show_details_attribute1(self):
        item=self.stree.GetSelection()
        pname=self.stree.GetItemText(item)
        self.st_attr1_title.SetLabel("Details: "+pname+" Attribute") 
        conn=sqlite3.connect("cobra.db")
        curse=conn.cursor() 
        curse.execute("SELECT * FROM attribute1 WHERE upper(name)='"+pname.upper()+"'")
        row=curse.fetchone()
        if row==None:
            impact=0
            pdata=(pname,impact)
            curse.execute("INSERT INTO attribute1 (name,impact) VALUES (?,?)",pdata)
            conn.commit()
            curse.execute("SELECT * FROM attribute1 WHERE upper(name)='"+pname.upper()+"'")
            item=self.stree.GetSelection()
            row=curse.fetchone()
        self.tc_impact1.SetValue(str(row[1]))
        curse.close()
        conn.close()
        return
    def on_save_attribute1(self, event):  # wxGlade: csFrame.<event_handler>
        item=self.stree.GetSelection()
        pname=self.stree.GetItemText(item)
        conn=sqlite3.connect("cobra.db")
        curse=conn.cursor() 
        setstr="impact="+self.tc_impact1.GetValue()
        curse.execute("UPDATE attribute1 SET "+setstr+" WHERE upper(name)='"+pname.upper()+"'")
        conn.commit()
        curse.close()
        conn.close()        
        self.calc_risk()
        self.show_details_attribute1()        
        wx.MessageBox('Saved Successfully', 'Saving Attribute', wx.OK) 
        event.Skip()

# *************************************************************
# Security Maintenance Routines                               *
# *************************************************************     
#
# Deactivate/Activate buttons on change of page        
    def on_stree_change(self, event):  # wxGlade: csFrame.<event_handler>
        item=self.stree.GetSelection()
        level=self.get_levels()
        if level=="Root":
          self.notebook_2.SetSelection(0)
          self.b_sec_add.Disable() 
          self.b_sec_insert.Disable()
          self.b_sec_child.Disable()
          self.b_sec_delete.Disable()
          self.b_sec_rename.Disable()
          self.nb2_root.Enable()
          self.nb2_group.Disable()
          self.nb2_process.Disable()          
          self.nb2_control.Disable()
          self.nb2_attribute.Disable()          
          self.show_details_cybersec()
        if level=="Group":
          self.notebook_2.SetSelection(1)
          self.b_sec_add.Disable()
          self.b_sec_insert.Disable()
          self.b_sec_child.Enable()
          self.b_sec_delete.Disable()
          self.b_sec_rename.Disable()
          self.nb2_root.Disable()
          self.nb2_group.Enable()
          self.nb2_process.Disable()          
          self.nb2_control.Disable()
          self.nb2_attribute.Disable() 
          self.show_details_sgroup()
        if level=="Process":
          self.notebook_2.SetSelection(2)
          self.b_sec_add.Enable()
          self.b_sec_insert.Enable()
          self.b_sec_child.Enable()
          self.b_sec_delete.Enable()
          self.b_sec_rename.Enable()
          self.nb2_root.Disable()
          self.nb2_group.Disable()
          self.nb2_process.Enable()          
          self.nb2_control.Disable()
          self.nb2_attribute.Disable()          
          self.show_details_process()     
        if level=="Control":
          self.notebook_2.SetSelection(3)
          self.b_sec_add.Enable()
          self.b_sec_insert.Enable()
          self.b_sec_child.Enable()
          self.b_sec_delete.Enable()
          self.b_sec_rename.Enable()
          self.nb2_root.Disable()
          self.nb2_group.Disable()
          self.nb2_process.Disable()          
          self.nb2_control.Enable()
          self.nb2_attribute.Disable()          
          self.show_details_control()     
        if level=="Attribute":
          self.notebook_2.SetSelection(4)
          self.b_sec_add.Enable()
          self.b_sec_insert.Enable()
          self.b_sec_child.Disable()
          self.b_sec_delete.Enable()
          self.b_sec_rename.Enable()
          self.nb2_root.Disable()
          self.nb2_group.Disable()
          self.nb2_process.Disable()          
          self.nb2_control.Disable()
          self.nb2_attribute.Enable()          
          self.show_details_attribute1()     
        event.Skip()
#
# Helper add/del routines
    def sec_add(self):
        item=self.stree.GetSelection() 
        name=self.stree.GetItemText(item)
        conn=sqlite3.connect("cobra.db")
        curse=conn.cursor() 
        level=self.get_levels()
        if level=="Process":           
            proc=curse.execute("SELECT COUNT(*) FROM process WHERE upper(name)='"+name.upper()+"'").fetchone()[0]
            if proc==0:
                sto=self.stree.GetItemText(self.stree.GetItemParent(item))    
                name=self.stree.GetItemText(item)
                bre=priority=maturity=opmat=capmat=0
                weight=10
                desc=""
                pdata=(name,sto,bre,desc,priority,weight,maturity,matdef[1],matdef[2],matdef[3],matdef[4],matdef[5],opmat,capdef[1],capdef[2],capdef[3],capdef[4],capdef[5],capmat)
                curse.execute("INSERT INTO process(name,sto,bre,description,priority, weight, maturity,opmat1,opmat2,opmat3,opmat4,opmat5,opmat,capmat1,capmat2,capmat3,capmat4,capmat5,capmat) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)",pdata)
        if level=="Control":           
            ctrl=curse.execute("SELECT COUNT(*) FROM control WHERE upper(name)='"+name.upper()+"'").fetchone()[0]
            if ctrl==0: 
                name=self.stree.GetItemText(item)
                effect=0                
                weight=10 
                desc=""
                pdata=(name,desc,weight,effdef[1],effdef[2],effdef[3],effdef[4],effdef[5],effect)
                curse.execute("INSERT INTO control(name,description,weight,opeff1,opeff2,opeff3,opeff4,opeff5,opeff) VALUES (?,?,?,?,?,?,?,?,?)",pdata)
        if level=="Attribute":           
           req=curse.execute("SELECT COUNT(*) FROM attribute1 WHERE upper(name)='"+name.upper()+"'").fetchone()[0]
           if req==0:
               impact=0
               pdata=(name,impact)
               curse.execute("INSERT INTO attribute1(name,impact) VALUES (?,?)",pdata)
        conn.commit()
        curse.close()
        conn.close()        
#
# Double click on item        
    def on_stree_item(self, event):  # wxGlade: csFrame.<event_handler>
        item=self.stree.GetSelection()
        self.tc_secitem.SetValue(self.stree.GetItemText(item))
        event.Skip()
#
# Add an item after the currently selected one
    def on_add_secitem(self, event):  # wxGlade: csFrame.<event_handler>
        item=self.stree.GetSelection() 
        parent=self.stree.GetItemParent(item)
        item=self.stree.InsertItem(parent,item,self.tc_secitem.GetValue())
        self.stree.SetFocusedItem(item) 
        self.sec_add()  
        self.tc_secitem.SetValue('')
        event.Skip()
#
# Add an item before the currently selected one        
    def on_insert_secitem(self, event):  # wxGlade: csFrame.<event_handler>
        item=self.stree.GetSelection() 
        parent=self.stree.GetItemParent(item)
        prev=self.stree.GetPrevSibling(item)
        if prev.IsOk():
           item=self.stree.InsertItem(parent,prev,self.tc_secitem.GetValue())
        else:             
           item=self.stree.PrependItem(parent,self.tc_secitem.GetValue())         
        self.stree.SetFocusedItem(item) 
        self.sec_add()  
        self.tc_secitem.SetValue('')
        event.Skip()
#
# Add a child item at the end of the branch
    def on_child_secitem(self, event):  # wxGlade: csFrame.<event_handler>
        item=self.stree.GetSelection() 
        item=self.stree.AppendItem(item,self.tc_secitem.GetValue())
        self.stree.SetFocusedItem(item) 
        self.sec_add()  
        self.tc_secitem.SetValue('')
        event.Skip()
#
# Delete the currently selected item
    def on_delete_secitem(self, event):  # wxGlade: csFrame.<event_handler>
        item=self.stree.GetSelection() 
        if self.stree.ItemHasChildren(item):
            wx.MessageBox("Please remove children first","Error",wx.OK)
        else:
            if wx.MessageDialog(None,"Delete "+self.stree.GetItemText(item)+"?","Confirm Deletion",wx.YES_NO).ShowModal()==wx.ID_YES:   
                self.stree.Delete(item)
        self.tc_secitem.SetValue('')
        event.Skip()
#
# Change the description of the item
    def on_rename_secitem(self, event):  # wxGlade: csFrame.<event_handler>
        item=self.stree.GetSelection() 
        name=self.stree.GetItemText(item)
        conn=sqlite3.connect("cobra.db")
        curse = conn.cursor()
        level=self.get_levels() 
        if level=="Process": 
          curse.execute("UPDATE process SET name='"+self.tc_secitem.GetValue()+"' WHERE upper(name)='"+name.upper()+"'")
        if level=="Control":
          curse.execute("UPDATE control SET name='"+self.tc_secitem.GetValue()+"' WHERE upper(name)='"+name.upper()+"'")
        if level=="Attribute":
          curse.execute("UPDATE attribute1 SET name='"+self.tc_secitem.GetValue()+"' WHERE upper(name)='"+name.upper()+"'")
        conn.commit()
        curse.close()
        conn.close()
        self.stree.SetItemText(item,self.tc_secitem.GetValue()) 
        self.tc_secitem.SetValue('')
        event.Skip()

#
# *******************************************************************************
#                                                                               *
# Business display/update/save main content                                     *
#                                                                               *
# *******************************************************************************
#
# Show details of current division
    def show_details_division(self):
        item=self.btree.GetSelection()
        pname=self.btree.GetItemText(item)
        self.st_div_title.SetLabel("Details: "+pname+" Division") 
        conn=sqlite3.connect("cobra.db")
        curse=conn.cursor() 
        curse.execute("SELECT * FROM division WHERE upper(name)='"+pname.upper()+"'")
        row=curse.fetchone()
        if row==None:
            desc=" "
            risk=0
            pdata=(pname,desc,risk)
            curse.execute("INSERT INTO division(name,description,risk) VALUES (?,?,?)",pdata)
            conn.commit()
            curse.execute("SELECT * FROM division WHERE upper(name)='"+pname.upper()+"'")
            item=self.btree.GetSelection()
            row=curse.fetchone()
        self.tc_desc_div.SetValue(row[1])
        self.c_div_cyrisk.SetLabel("Assessed cyber risk: "+str(row[2])+"%")
        curse.close()
        conn.close()        
        return
    def on_save_division(self, event):  # wxGlade: csFrame.<event_handler>
        item=self.btree.GetSelection()
        pname=self.btree.GetItemText(item)
        conn=sqlite3.connect("cobra.db")
        curse=conn.cursor() 
        setstr="description='"+self.tc_desc_div.GetValue()+"'"
        curse.execute("UPDATE division SET "+setstr+" WHERE upper(name)='"+pname.upper()+"'")
        conn.commit()
        curse.close()
        conn.close()        
        wx.MessageBox('Saved Successfully', 'Saving Division', wx.OK) 
        event.Skip()
#
# Show details of current service
    def show_details_service(self):
        item=self.btree.GetSelection()
        pname=self.btree.GetItemText(item)
        self.st_svc_title.SetLabel("Details: "+pname+" Service") 
        conn=sqlite3.connect("cobra.db")
        curse=conn.cursor() 
        curse.execute("SELECT * FROM service WHERE upper(name)='"+pname.upper()+"'")
        row=curse.fetchone()
        if row==None:
            desc=" "
            risk=contribution=enable=breach=0
            pdata=(pname,desc,contribution,risk,enable,breach)
            curse.execute("INSERT INTO service(name,description,contribution,risk,enable,breach) VALUES (?,?,?,?,?,?)",pdata)
            conn.commit()
            curse.execute("SELECT * FROM service WHERE upper(name)='"+pname.upper()+"'")
            item=self.btree.GetSelection()
            row=curse.fetchone()
        self.tc_desc_svc.SetValue(row[1])
        self.tc_value_svc.SetValue("{:,}".format(row[2]))
        self.tc_enable_svc.SetValue(str(row[4]))
        self.tc_breach_svc.SetValue("{:,}".format(row[5]))
        self.c_svc_cyrisk.SetLabel("Assessed cyber risk:   "+str(row[3])+"%")
        cycost=int((row[2]*row[3]/100)+(row[5]*row[3]/100))
        self.c_svc_cycost.SetLabel("Assessed cyber cost:   $"+str(cycost)+"K")
        curse.close()
        conn.close()        
        return
    def on_save_service(self, event):  # wxGlade: csFrame.<event_handler>
        item=self.btree.GetSelection()
        pname=self.btree.GetItemText(item)
        conn=sqlite3.connect("cobra.db")
        curse=conn.cursor() 
        setstr="description='"+self.tc_desc_svc.GetValue()+"'"
        setstr=setstr+",contribution="+self.tc_value_svc.GetValue().replace(",","") 
        setstr=setstr+",enable="+self.tc_enable_svc.GetValue() 
        setstr=setstr+",breach="+self.tc_breach_svc.GetValue().replace(",","") 
        curse.execute("UPDATE service SET "+setstr+" WHERE upper(name)='"+pname.upper()+"'")
        conn.commit()
        curse.close()
        conn.close()        
        self.calc_risk()
        self.show_details_service()        
        wx.MessageBox('Saved Successfully', 'Saving Service', wx.OK) 
        event.Skip()
#
# Show details of current technology
    def show_details_technology(self):
        item=self.btree.GetSelection()
        pname=self.btree.GetItemText(item)
        self.st_tech_title.SetLabel("Details: "+pname+" Technology") 
        conn=sqlite3.connect("cobra.db")
        curse=conn.cursor() 
        curse.execute("SELECT * FROM technology WHERE upper(name)='"+pname.upper()+"'")
        row=curse.fetchone()
        if row==None:
            desc=platform=" "
            risk=factor=0
            pdata=(pname,desc,platform,risk,factor)
            curse.execute("INSERT INTO technology(name,description,platform,risk,factor) VALUES (?,?,?,?,?)",pdata)
            conn.commit()
            curse.execute("SELECT * FROM technology WHERE upper(name)='"+pname.upper()+"'")
            item=self.btree.GetSelection()
            row=curse.fetchone()
        self.tc_desc_tech.SetValue(row[1])
        self.tc_platform.SetValue(row[2])
        self.c_risk_tech.SetLabel("Cyber Risk "+str(row[3])+"%")
        self.tc_factor.SetValue(str(row[4]))   
        curse.close()
        conn.close()        
        return
    def on_save_technology(self, event):  # wxGlade: csFrame.<event_handler>
        item=self.btree.GetSelection()
        pname=self.btree.GetItemText(item)
        conn=sqlite3.connect("cobra.db")
        curse=conn.cursor() 
        setstr="description='"+self.tc_desc_tech.GetValue()+"'"
        setstr=setstr+",platform='"+self.tc_platform.GetValue()+"'"
        setstr=setstr+",factor="+self.tc_factor.GetValue()        
        curse.execute("UPDATE technology SET "+setstr+" WHERE upper(name)='"+pname.upper()+"'")
        conn.commit()
        curse.close()
        conn.close()        
        self.calc_risk()
        self.show_details_technology()        
        wx.MessageBox('Saved Successfully', 'Saving Technology', wx.OK) 
        event.Skip()
#
# Show details of current attribute (business view) 
    def show_details_attribute2(self):
        item=self.btree.GetSelection()
        name=self.btree.GetItemText(item)
        tech=self.btree.GetItemText(self.btree.GetItemParent(item))   
        self.st_attr2_title.SetLabel("Details: "+name+" Attribute") 
        conn=sqlite3.connect("cobra.db")
        curse=conn.cursor() 
        setstr="SELECT * FROM attribute2"
        setstr=setstr+" WHERE (upper(name)='"+name.upper()+"' and upper(tech)='"+tech.upper()+"')"        
        curse.execute(setstr)
        row=curse.fetchone()
        if row==None:
            impact=risk=adjusted=0
            pdata=(tech,name,impact,risk,adjusted)
            curse.execute("INSERT INTO attribute2 (tech, name,impact,risk,adjusted) VALUES (?,?,?,?,?)",pdata)
            conn.commit()
            curse.execute(setstr)
            item=self.btree.GetSelection()
            row=curse.fetchone()
        self.tc_impact2.SetValue(str(row[2]))
        self.tc_brisk.SetValue(str(row[3]))
        self.st_arisk.SetLabel("Fully adjusted risk  "+str(row[4])+"%")
        level=0
        for i in range(6):
            if row[4]>=factor1[i]:
                level=i
        self.st_alevel.SetLabel("Effective risk level: "+riskdef[level+1])        
        curse.close()
        conn.close()
        return
    def on_save_attribute2(self, event):  # wxGlade: csFrame.<event_handler>
        item=self.btree.GetSelection()
        name=self.btree.GetItemText(item)
        tech=self.btree.GetItemText(self.btree.GetItemParent(item))   
        conn=sqlite3.connect("cobra.db")
        curse=conn.cursor() 
        setstr="UPDATE attribute2 SET impact="+self.tc_impact2.GetValue()+",risk="+self.tc_brisk.GetValue()
        setstr=setstr+" WHERE (upper(tech)='"+tech.upper()+"' and upper(name)='"+name.upper()+"')"
        curse.execute(setstr)
        conn.commit()
        curse.close()
        conn.close()        
        self.calc_risk()   
        self.show_details_attribute2()  
        wx.MessageBox('Saved Successfully', 'Saving Attribute', wx.OK) 
        event.Skip()

# *************************************************************
# Business Maintenance Routines                               *
# *************************************************************     
#
# Activate/Deactivate buttons on change of page
    def on_btree_change(self, event):  # wxGlade: csFrame.<event_handler>
        item=self.btree.GetSelection()
        level=self.get_levelb()
        if level=="Root":
          self.notebook_3.SetSelection(0)
          self.b_bus_add.Disable()
          self.b_bus_insert.Disable()
          self.b_bus_child.Enable()
          self.b_bus_delete.Disable()
          self.b_bus_rename.Disable()
          self.nb3_root.Enable()
          self.nb3_division.Disable()
          self.nb3_service.Disable()          
          self.nb3_technology.Disable()
          self.nb3_attribute.Disable()          
        if level=="Division":
          self.notebook_3.SetSelection(1)
          self.b_bus_add.Enable()
          self.b_bus_insert.Enable()
          self.b_bus_child.Enable()
          self.b_bus_delete.Enable()
          self.b_bus_rename.Enable()
          self.nb3_root.Disable()
          self.nb3_division.Enable()
          self.nb3_service.Disable()          
          self.nb3_technology.Disable()
          self.nb3_attribute.Disable()          
          self.show_details_division()     
        if level=="Service":
          self.notebook_3.SetSelection(2)
          self.b_bus_add.Enable()
          self.b_bus_insert.Enable()
          self.b_bus_child.Enable()
          self.b_bus_delete.Enable()
          self.b_bus_rename.Enable()
          self.nb3_root.Disable()
          self.nb3_division.Disable()
          self.nb3_service.Enable()          
          self.nb3_technology.Disable()
          self.nb3_attribute.Disable()          
          self.show_details_service()     
        if level=="Technology":
          self.notebook_3.SetSelection(3)
          self.b_bus_add.Enable()
          self.b_bus_insert.Enable()
          self.b_bus_child.Enable()
          self.b_bus_delete.Enable()
          self.b_bus_rename.Enable()
          self.nb3_root.Disable()
          self.nb3_division.Disable()
          self.nb3_service.Disable()          
          self.nb3_technology.Enable()
          self.nb3_attribute.Disable()          
          self.show_details_technology()     
        if level=="Attribute":
          self.notebook_3.SetSelection(4)
          self.b_bus_add.Enable()
          self.b_bus_insert.Enable()
          self.b_bus_child.Disable()
          self.b_bus_delete.Enable()
          self.b_bus_rename.Enable()
          self.nb3_root.Disable()
          self.nb3_division.Disable()
          self.nb3_service.Disable()          
          self.nb3_technology.Disable()
          self.nb3_attribute.Enable()          
          self.show_details_attribute2()     
        event.Skip()
#
# Helper add/del routines
    def bus_add(self):
        item=self.btree.GetSelection() 
        name=self.btree.GetItemText(item)
        conn=sqlite3.connect("cobra.db")
        curse=conn.cursor() 
        level=self.get_levelb()
        if level=="Division":  
           div=curse.execute("SELECT COUNT(*) FROM division WHERE upper(name)='"+name.upper()+"'").fetchone()[0]
           if div==0:
               desc=""
               risk=0
               pdata=(name,desc,risk)
               curse.execute("INSERT INTO division(name,description,risk) VALUES (?,?,?)",pdata)
        if level=="Service":           
           svc=curse.execute("SELECT COUNT(*) FROM service WHERE upper(name)='"+name.upper()+"'").fetchone()[0]
           if svc==0:
               desc=""
               risk=contribution=enable=breach=0               
               pdata=(name,desc,contribution,risk,enable,breach)
               curse.execute("INSERT INTO service(name,description,contribution,risk,enable,breach) VALUES (?,?,?,?,?,?)",pdata)
        if level=="Technology":           
           req=curse.execute("SELECT COUNT(*) FROM technology WHERE upper(name)='"+name.upper()+"'").fetchone()[0]
           if req==0:
               desc=platform=""
               risk=factor=0
               pdata=(name,desc,platform,risk,factor)
               curse.execute("INSERT INTO technology(name,description,platform,risk,factor) VALUES (?,?,?,?,?)",pdata)
        if level=="Attribute":           
           tech=self.btree.GetItemText(self.btree.GetItemParent(item))  
           setstr="SELECT COUNT(*) FROM attribute2"
           setstr=setstr+" WHERE (upper(tech)='"+tech.upper()+"' and upper(name)='"+name.upper()+"')" 
           req=curse.execute(setstr).fetchone()[0]
           if req==0:
               desc=platform=""
               impact=risk=adjusted=0
               pdata=(tech,name,impact,risk,adjusted)
               curse.execute("INSERT INTO attribute2(tech,name,impact,risk,adjusted) VALUES (?,?,?,?,?)",pdata)
        conn.commit()
        curse.close()
        conn.close()        
#
# Double click btree item
    def on_btree_item(self, event):  # wxGlade: csFrame.<event_handler>
        item=self.btree.GetSelection()
        self.tc_busitem.SetValue(self.btree.GetItemText(item))
        event.Skip()
#
# Add a peer business item
    def on_add_busitem(self, event):  # wxGlade: csFrame.<event_handler>
        item=self.btree.GetSelection() 
        parent=self.btree.GetItemParent(item)
        item=self.btree.InsertItem(parent,item,self.tc_busitem.GetValue())
        self.btree.SetFocusedItem(item) 
        self.bus_add()  
        self.tc_busitem.SetValue('')
        event.Skip()
#
# Insert a peer business item
    def on_insert_busitem(self, event):  # wxGlade: csFrame.<event_handler>
        item=self.btree.GetSelection() 
        parent=self.btree.GetItemParent(item)
        prev=self.btree.GetPrevSibling(item)
        if prev.IsOk():
           item=self.btree.InsertItem(parent,prev,self.tc_busitem.GetValue())
        else:             
           item=self.btree.PrependItem(parent,self.tc_busitem.GetValue())         
        self.btree.SetFocusedItem(item) 
        self.bus_add()  
        self.tc_busitem.SetValue('')
        event.Skip()
#
# Add a child business item
    def on_child_busitem(self, event):  # wxGlade: csFrame.<event_handler>
        item=self.btree.GetSelection() 
        item=self.btree.AppendItem(item,self.tc_busitem.GetValue())
        self.btree.SetFocusedItem(item) 
        self.bus_add()  
        self.tc_busitem.SetValue('')
        event.Skip()
#
# Delete a business item        
    def on_delete_busitem(self, event):  # wxGlade: csFrame.<event_handler>
        item=self.btree.GetSelection() 
        if wx.MessageDialog(None,"Delete "+self.btree.GetItemText(item)+"?","Confirm Deletion",wx.YES_NO).ShowModal()==wx.ID_YES:   
            pname=self.btree.GetItemText(item)
            self.btree.Delete(item)
        self.tc_busitem.SetValue('')
        event.Skip()
#
# Rename a business item        
    def on_rename_busitem(self, event):  # wxGlade: csFrame.<event_handler>
        item=self.btree.GetSelection() 
        name=self.btree.GetItemText(item)
        self.btree.SetItemText(item,self.tc_busitem.GetValue()) 
        conn=sqlite3.connect("cobra.db")
        curse = conn.cursor()
        level=self.get_levelb() 
        if level=="Division": 
          curse.execute("UPDATE division SET name='"+self.tc_busitem.GetValue()+"' WHERE upper(name)='"+name.upper()+"'")
        if level=="Service":
          curse.execute("UPDATE service SET name='"+self.tc_busitem.GetValue()+"' WHERE upper(name)='"+name.upper()+"'")
        if level=="Technology":
          curse.execute("UPDATE technology SET name='"+self.tc_busitem.GetValue()+"' WHERE upper(name)='"+name.upper()+"'")
          curse.execute("UPDATE attribute2 SET tech='"+self.tc_busitem.GetValue()+"' WHERE upper(tech)='"+name.upper()+"'")
        if level=="Attribute":
          curse.execute("UPDATE attribute2 SET name='"+self.tc_busitem.GetValue()+"' WHERE upper(name)='"+name.upper()+"'")
        conn.commit()
        curse.close()
        conn.close()
        self.tc_busitem.SetValue('')
        event.Skip()
        
# ***********************************************************************
#                                                                       *
# Attribute Management Routines                                         *
#                                                                       *
# ***********************************************************************        
    def show_details_group(self):
        item=self.atree.GetSelection()
        pname=self.atree.GetItemText(item)
        self.st_taxgroup_title.SetLabel("Details: "+pname+" Taxonomy Group") 
        return

    def show_details_attribute(self):
        item=self.atree.GetSelection()
        pname=self.atree.GetItemText(item)
        self.st_attribute_title.SetLabel("Details: "+pname+" Attribute") 
        self.lblink.Clear()
        if self.clink.GetString(self.clink.GetSelection())=='Controls':
            conn=sqlite3.connect("cobra.db")
            curse=conn.cursor() 
            curse.execute("SELECT control from csms where attribute='"+pname+"'")  
            ctrls=curse.fetchall()   
            for ctrl in ctrls:
               self.lblink.Append(ctrl[0])
            curse.close()
            conn.close()            
        if self.clink.GetString(self.clink.GetSelection())=='Technologies':
            conn=sqlite3.connect("cobra.db")
            curse=conn.cursor() 
            curse.execute("SELECT technology from brms where attribute='"+pname+"'")  
            techs=curse.fetchall()   
            for tech in techs:
               self.lblink.Append(tech[0])
            curse.close()
            conn.close()            
        conn=sqlite3.connect("cobra.db")
        curse=conn.cursor() 
        curse.execute("SELECT * FROM attribute WHERE upper(name)='"+pname.upper()+"'")
        row=curse.fetchone()
        if row==None:
            desc=metric=measure=""
            rating=0
            inherent=adjusted=0
            pdata=(pname,desc,metric,measure,rating,inherent,adjusted)
            curse.execute("INSERT INTO attribute(name,description,metric,measure,rating,inherent,adjusted) VALUES (?,?,?,?,?,?,?)",pdata)
            conn.commit()
            curse.execute("SELECT * FROM attribute WHERE upper(name)='"+pname.upper()+"'")
            item=self.atree.GetSelection()
            row=curse.fetchone()
        self.tc_desc_attribute.SetValue(row[1])
        self.tc_risk_measure.SetValue(row[3])
        self.tc_override.SetValue(str(row[5]))  
        self.st_adjusted_risk.SetLabel("Adjusted risk: "+str(row[6])+"%")
        self.st_attr_rating.SetLabel("Risk rating:   "+riskdef[row[4]]) 
        curse.close()
        conn.close()        
        return
    def on_save_attribute3(self, event):  # wxGlade: csFrame.<event_handler>
        item=self.atree.GetSelection()
        pname=self.atree.GetItemText(item)
        conn=sqlite3.connect("cobra.db")
        curse=conn.cursor() 
        setstr="description='"+self.tc_desc_attribute.GetValue()+"'"
        setstr=setstr+",metric=' '"
        setstr=setstr+",measure='"+self.tc_risk_measure.GetValue()+"'"
        setstr=setstr+",inherent="+str(self.tc_override.GetValue())
        curse.execute("UPDATE attribute SET "+setstr+" WHERE upper(name)='"+pname.upper()+"'")
        conn.commit()
        curse.close()
        conn.close()        
        self.calc_risk()
        self.show_details_attribute()        
        wx.MessageBox('Saved Successfully', 'Saving Attribute', wx.OK) 
        event.Skip()
#
# Actions on changing the selection in the attribute tree0
    def on_atree_change(self, event):  # wxGlade: csFrame.<event_handler>
        item=self.atree.GetSelection()
        level=self.get_levela()
        if level=="Root":
            self.notebook_4.SetSelection(0)
            self.nb4_root.Enable()
            self.nb4_group.Disable()          
            self.nb4_attribute.Disable()           
            self.b_attr_add.Disable()
            self.b_attr_insert.Disable()
            self.b_attr_child.Enable()
            self.b_attr_delete.Disable()
            self.b_attr_rename.Disable()
        if level=="Group":
            self.notebook_4.SetSelection(1)
            self.nb4_root.Disable()
            self.nb4_group.Enable()          
            self.nb4_attribute.Disable()           
            self.b_attr_add.Enable()
            self.b_attr_insert.Enable()
            self.b_attr_child.Enable()
            self.b_attr_delete.Enable()
            self.b_attr_rename.Enable()
            self.show_details_group()     
        if level=="Attribute":
            self.notebook_4.SetSelection(2)
            self.nb4_root.Disable()
            self.nb4_group.Disable()          
            self.nb4_attribute.Enable()           
            self.b_attr_add.Enable()
            self.b_attr_insert.Enable()
            self.b_attr_child.Disable()
            self.b_attr_delete.Enable()
            self.b_attr_rename.Enable()
            self.show_details_attribute()     
        event.Skip()

    def attr_add(self):
        item=self.atree.GetSelection() 
        name=self.atree.GetItemText(item)
        conn=sqlite3.connect("cobra.db")
        curse=conn.cursor() 
        if self.atree.GetItemParent(item)!=self.atree.GetRootItem():
           attr=curse.execute("SELECT COUNT(*) FROM attribute WHERE name='"+name+"'").fetchone()[0]
           if attr==0:
               desc=metric=measure=""
               rating=0
               inherent=adjusted=0
               pdata=(name,desc,metric,measure,rating,inherent,adjusted)
               curse.execute("INSERT INTO attribute(name,description,metric,measure,rating,inherent,adjusted) VALUES (?,?,?,?,?,?,?)",pdata)
        conn.commit()
        curse.close()
        conn.close()        
        return
    
    def on_atree_item(self, event):  # wxGlade: csFrame.<event_handler>
        item=self.atree.GetSelection()
        self.tc_attribute.SetValue(self.atree.GetItemText(item))
        event.Skip()

    def on_add_attr(self, event):  # wxGlade: csFrame.<event_handler>
        item=self.atree.GetSelection() 
        parent=self.atree.GetItemParent(item)
        item=self.atree.InsertItem(parent,item,self.tc_attribute.GetValue())
        self.atree.SetFocusedItem(item) 
        self.attr_add()  
        self.tc_attribute.SetValue('')
        event.Skip()

    def on_insert_attr(self, event):  # wxGlade: csFrame.<event_handler>
        item=self.atree.GetSelection() 
        parent=self.atree.GetItemParent(item)
        prev=self.atree.GetPrevSibling(item)
        if prev.IsOk():
           item=self.atree.InsertItem(parent,prev,self.tc_attribute.GetValue())
        else:             
           item=self.atree.PrependItem(parent,self.tc_attribute.GetValue())         
        self.atree.SetFocusedItem(item) 
        self.attr_add()  
        self.tc_attribute.SetValue('')
        event.Skip()
 
    def on_child_attr(self, event):  # wxGlade: csFrame.<event_handler>
        item=self.atree.GetSelection() 
        item=self.atree.AppendItem(item,self.tc_attribute.GetValue())
        self.atree.SetFocusedItem(item) 
        self.attr_add()  
        self.tc_attribute.SetValue('')
        event.Skip()
        
    def on_delete_attr(self, event):  # wxGlade: csFrame.<event_handler>
        item=self.atree.GetSelection() 
        if wx.MessageDialog(None,"Delete "+self.atree.GetItemText(item)+"?","Confirm Deletion",wx.YES_NO).ShowModal()==wx.ID_YES:   
            pname=self.atree.GetItemText(item)
            self.atree.Delete(item)
        self.tc_attribute.SetValue('')
        event.Skip()

    def on_rename_attr(self, event):  # wxGlade: csFrame.<event_handler>
        item=self.atree.GetSelection() 
        name=self.atree.GetItemText(item)
        self.atree.SetItemText(item,self.tc_attribute.GetValue()) 
        conn=sqlite3.connect("cobra.db")
        curse = conn.cursor()
        level=self.get_levela() 
        if level=="Attribute":
          curse.execute("UPDATE attribute1 SET name='"+self.tc_attribute.GetValue()+"' WHERE name='"+name+"'")
          curse.execute("UPDATE attribute2 SET name='"+self.tc_attribute.GetValue()+"' WHERE name='"+name+"'")
          self.rekey()
        conn.commit()
        curse.close()
        conn.close()
        self.tc_attribute.SetValue('')
        event.Skip()

    def on_clink(self, event):  # wxGlade: csFrame.<event_handler>
        self.show_details_attribute()
        event.Skip()

# *****************************************************************
# End of processing routines                                      *
# *****************************************************************        
# end of class csFrame

class MyApp(wx.App):
    def OnInit(self):
        self.frame = csFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
